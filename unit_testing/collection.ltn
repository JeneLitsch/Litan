namespace test {
	function queue_push_pop_peek() {
		var fx = lambda(values) {
			var queue = std::queue();
			for i (0, std::size(values)) {
				std::push(queue, values[i]);
			}
			var q0 = std::pop(queue);
			var q1 = std::peek(queue);
			return q1 + q0;
		};

		var cases = [
			[[[1, 2, 42]], 3],
			[[[1000, 337, 42]], 1337],
			[[[-3, -5, 42, 1, 1, 1, 1]], -8],
		];

		return test_all_cases("Queue(push, pop, peek)", fx, cases);
	}

	function queue_size() {
		var fx = lambda(size) {
			var queue = std::queue();
			for i (0, size) {
				std::push(queue, 42);
			}
			return std::size(queue);
		};

		var cases = [
			[[3],3],
			[[4],4],
			[[-4],0],
			[['A'],65],
		];

		return test_all_cases("Queue(size)", fx, cases);
	}

	function queue() {
		return
			queue_push_pop_peek()+
			queue_size();
	}



	function array_size() {
		var cases = [
			[[[1,2,3]], 3],
			[[[1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f',16]], 16],
			[[[1,2,3] + [4,5]], 5],
			[[std::array()], 0],
			[[std::array(42)], 1],
		];
		return test_all_cases("Array(size)", &std::size(_), cases);
	}

	function array_front() {
		var cases = [
			[[[1,2,3]], 1],
			[[[-1, 1,2,3]], -1],
		];
		return test_all_cases("Array(front)", &std::front(_), cases);
	}

	function array_back() {
		var cases = [
			[[[1,2,3]], 3],
			[[[-1, 1,2,3, 666]], 666],
		];
		return test_all_cases("Array(back)", &std::back(_), cases);
	}

	function array_index_clone() {
		var fx = lambda(array) {
			var arr = std::clone(array);
			var sum1 = 0;
			var sum2 = 0;
			for i (0, std::size(arr)) {
				sum1 += arr[i];
				arr[i] = 0;
				sum2 += arr[i];
			}
			return sum1 + sum2;
		};

		var cases = [
			[[[1,2,3]], 6],
			[[[80, -40, 2]], 42],
			[[[-1, -2, -3, 1, 2, 3, 666]], 666],
		];
		return test_all_cases("Array([], clone)", fx, cases);
	}

	function array() {
		return
			array_size() +
			array_front() +
			array_back() +
			array_index_clone();
	}

}