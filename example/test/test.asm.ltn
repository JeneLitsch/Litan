-> MAIN
call FNX_main0
exit


// main ( -> Void ) 
-> FNX_main0
stackalloc 1
newl 1
newl 1
logand
store 0
load 0
call FNX_println56
load 0
newi 1
smleqli
call FNX_println56
load 0
lognot
call FNX_println56
newf 42.000000
newf 0.000000
spshf
newi 1
eqli
call FNX_println56
newf 0.000000
newf 0.000000
spshf
newi 0
eqli
call FNX_println56
newf 0.000000
newf 2.000000
spshf
newi 1
mnsi
eqli
call FNX_println56
newi 42
newi 0
spshi
newi 1
eqli
call FNX_println56
newi 0
newi 0
spshi
newi 0
eqli
call FNX_println56
newi 0
newi 2
spshi
newi 1
mnsi
eqli
call FNX_println56
return


// functionFromElsewhere ( Int -> Void ) 
-> FNX_functionFromElsewhere1
stackalloc 1
store 0
load 0
call FNX_println55
return


// Int ( Raw -> Int ) 
-> FNX_Int2
stackalloc 1
store 0
load 0
return
error


// Int ( Float -> Int ) 
-> FNX_Int3
stackalloc 1
store 0
load 0
casti
return
error


// Float ( Raw -> Float ) 
-> FNX_Float4
stackalloc 1
store 0
load 0
return
error


// Float ( Int -> Float ) 
-> FNX_Float5
stackalloc 1
store 0
load 0
castf
return
error


// destroy ( Pointer -> Void ) 
-> FNX_destroy6
stackalloc 1
store 0
load 0
heap::delete
return


// exists ( Pointer -> Bool ) 
-> FNX_exists7
stackalloc 1
store 0
load 0
heap::exist
return
error


// min ( Int Int -> Int ) 
-> FNX_min8
stackalloc 2
store 1
store 0
load 0
load 1
mini
return
error


// min ( Float Float -> Float ) 
-> FNX_min9
stackalloc 2
store 1
store 0
load 0
load 1
minf
return
error


// max ( Int Int -> Int ) 
-> FNX_max10
stackalloc 2
store 1
store 0
load 0
load 1
maxi
return
error


// max ( Float Float -> Float ) 
-> FNX_max11
stackalloc 2
store 1
store 0
load 0
load 1
maxf
return
error


// round ( Float -> Int ) 
-> FNX_round12
stackalloc 1
store 0
load 0
casti 1
return
error


// floor ( Float -> Int ) 
-> FNX_floor13
stackalloc 1
store 0
load 0
casti 2
return
error


// ceil ( Float -> Int ) 
-> FNX_ceil14
stackalloc 1
store 0
load 0
casti 3
return
error


// Array ( -> Array ) 
-> FNX_Array15
stackalloc 0
heap::allocate::array
return
error


// Array ( Int -> Array ) 
-> FNX_Array16
stackalloc 2
store 0
load 0
newi 0
smli
ifnx
goto IF62
goto END_IF64
-> IF62
call FNX_error60
goto END_IF64
-> END_IF64
call FNX_Array15
store 1
load 1
load 0
array::resize
load 1
return
error


// clear ( Array -> Void ) 
-> FNX_clear17
stackalloc 1
store 0
load 0
array::clear
return


// insert ( Array Int Raw -> Void ) 
-> FNX_insert18
stackalloc 3
store 2
store 1
store 0
load 0
load 1
load 2
array::insert
return


// erase ( Array Int -> Void ) 
-> FNX_erase19
stackalloc 2
store 1
store 0
load 0
load 1
array::erase
return


// empty ( Array -> Bool ) 
-> FNX_empty20
stackalloc 1
store 0
load 0
array::empty
return
error


// size ( Array -> Int ) 
-> FNX_size21
stackalloc 1
store 0
load 0
array::size
return
error


// pushback ( Array Raw -> Void ) 
-> FNX_pushback22
stackalloc 2
store 1
store 0
load 0
load 1
array::pushback
return


// popback ( Array -> Raw ) 
-> FNX_popback23
stackalloc 1
store 0
load 0
array::popback
return
error


// at ( Array Int -> Raw ) 
-> FNX_at24
stackalloc 2
store 1
store 0
load 0
load 1
array::get
return
error


// at ( Array Int Raw -> Void ) 
-> FNX_at25
stackalloc 3
store 2
store 1
store 0
load 0
load 1
load 2
array::set
return


// front ( Array -> Raw ) 
-> FNX_front26
stackalloc 1
store 0
load 0
array::front
error


// back ( Array -> Raw ) 
-> FNX_back27
stackalloc 1
store 0
load 0
array::back
error


// Stack ( -> Stack ) 
-> FNX_Stack28
stackalloc 0
heap::allocate::stack
return
error


// push ( Stack Raw -> Void ) 
-> FNX_push29
stackalloc 2
store 1
store 0
load 0
load 1
stack::push
return


// pop ( Stack -> Raw ) 
-> FNX_pop30
stackalloc 1
store 0
load 0
stack::pop
return
error


// top ( Stack -> Raw ) 
-> FNX_top31
stackalloc 1
store 0
load 0
stack::top
return
error


// empty ( Stack -> Bool ) 
-> FNX_empty32
stackalloc 1
store 0
load 0
stack::empty
return
error


// size ( Stack -> Int ) 
-> FNX_size33
stackalloc 1
store 0
load 0
stack::size
return
error


// Queue ( -> Queue ) 
-> FNX_Queue34
stackalloc 0
heap::allocate::queue
return
error


// push ( Queue Raw -> Void ) 
-> FNX_push35
stackalloc 2
store 1
store 0
load 0
load 1
queue::push
return


// pop ( Queue -> Raw ) 
-> FNX_pop36
stackalloc 1
store 0
load 0
queue::pop
return
error


// front ( Queue -> Raw ) 
-> FNX_front37
stackalloc 1
store 0
load 0
queue::front
return
error


// empty ( Queue -> Bool ) 
-> FNX_empty38
stackalloc 1
store 0
load 0
queue::empty
return
error


// Deque ( -> Deque ) 
-> FNX_Deque39
stackalloc 0
heap::allocate::deque
return
error


// clear ( Deque -> Void ) 
-> FNX_clear40
stackalloc 1
store 0
load 0
deque::clear
return


// pushFront ( Deque Raw -> Void ) 
-> FNX_pushFront41
stackalloc 2
store 1
store 0
load 0
load 1
deque::pushf
return


// popFront ( Deque -> Raw ) 
-> FNX_popFront42
stackalloc 1
store 0
load 0
deque::popf
return
error


// pushBack ( Deque Raw -> Void ) 
-> FNX_pushBack43
stackalloc 2
store 1
store 0
load 0
load 1
deque::pushb
return


// popBack ( Deque -> Raw ) 
-> FNX_popBack44
stackalloc 1
store 0
load 0
deque::popb
return
error


// front ( Deque -> Raw ) 
-> FNX_front45
stackalloc 1
store 0
load 0
deque::front
return
error


// back ( Deque -> Raw ) 
-> FNX_back46
stackalloc 1
store 0
load 0
deque::back
return
error


// size ( Deque -> Int ) 
-> FNX_size47
stackalloc 1
store 0
load 0
deque::size
return
error


// empty ( Deque -> Bool ) 
-> FNX_empty48
stackalloc 1
store 0
load 0
deque::empty
return
error


// print ( Raw -> Void ) 
-> FNX_print49
stackalloc 1
store 0
load 0
print::uint
return


// print ( Int -> Void ) 
-> FNX_print50
stackalloc 1
store 0
load 0
print::int
return


// print ( Bool -> Void ) 
-> FNX_print51
stackalloc 1
store 0
load 0
print::bool
return


// print ( Float -> Void ) 
-> FNX_print52
stackalloc 1
store 0
load 0
print::float
return


// print ( String -> Void ) 
-> FNX_print53
stackalloc 1
store 0
load 0
print::string
return


// println ( Raw -> Void ) 
-> FNX_println54
stackalloc 1
store 0
load 0
print::uint
print::newline
return


// println ( Int -> Void ) 
-> FNX_println55
stackalloc 1
store 0
load 0
print::int
print::newline
return


// println ( Bool -> Void ) 
-> FNX_println56
stackalloc 1
store 0
load 0
print::bool
print::newline
return


// println ( Float -> Void ) 
-> FNX_println57
stackalloc 1
store 0
load 0
print::float
print::newline
return


// println ( String -> Void ) 
-> FNX_println58
stackalloc 1
store 0
load 0
print::string
print::newline
return


// println ( -> Void ) 
-> FNX_println59
stackalloc 0
print::newline
return


// error ( -> Void ) 
-> FNX_error60
stackalloc 0
error
return


// add ( String String -> String ) 
-> FNX_add61
stackalloc 2
store 1
store 0
load 0
load 1
string::add
return
error


