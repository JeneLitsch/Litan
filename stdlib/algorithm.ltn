namespace std {
	// executes "fx" for each element in range
	function for_each(range, fx) {
		for i (std::begin(range), std::end(range)) {
			std::invoke(fx, [std::array(range)[i]]);
		}
	}


	// starts at "start" and adds (+=) all elements in range
	function sum(range, start) {
		var value = start;
		for i (std::begin(range), std::end(range)) {
			value += std::array(range)[i];
		}
		return value;
	}


	// starts at 0 and adds (+=) all elements in range
	function sum(range) {
		var value = 0;
		for i (std::begin(range), std::end(range)) {
			value += std::array(range)[i];
		}
		return value;
	}


	asm sort_ascn(range) {
		"algorithm 1"
	}

	asm sort_desc(range) {
		"algorithm 2"
	}

	asm find(range, key) {
		"swap 0 1"
		"algorithm 10"
		"return"
	}


	asm copy_front(range, target) {
		"swap 0 1"
		"algorithm 20"
	}

	asm copy_back(range, target) {
		"swap 0 1"
		"algorithm 22"
	}


	asm fill(range, target) {
		"swap 0 1"
		"algorithm 30"
	}
}