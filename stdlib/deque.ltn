namespace ltn {
	typedef Deque;

	function Deque() -> ltn::Deque
		asm { "deque::new" "return" }

	function clear(ltn::Deque array) -> Void
		asm { "load 0" "deque::clear" }

	function pushFront(ltn::Deque deque, Raw value) -> Void
		asm { "load 0" "load 1" "deque::pushf" }


	function popFront(ltn::Deque deque) -> Raw
		asm { "load 0" "deque::popf" "return" }


	function pushBack(ltn::Deque deque, Raw value) -> Void
		asm { "load 0" "load 1" "deque::pushb" }


	function popBack(ltn::Deque deque) -> Raw
		asm { "load 0" "deque::popb" "return" }


	function front(ltn::Deque deque) -> Raw
		asm { "load 0" "deque::front" "return" }


	function back(ltn::Deque deque) -> Raw
		asm { "load 0" "deque::back" "return" }

	function size(ltn::Deque deque) -> Int 
		asm { "load 0" "deque::size" "return" }

	function empty(ltn::Deque deque) -> Int 
		asm { "load 0" "deque::empty" "return" }
}