namespace ltn {
	// Array based on std::vector
	typedef Array;
	
	function Array() -> ltn::Array
		asm { "heap::allocate::array" "return" }


	function Array(Int size) -> ltn::Array {
		if(size < 0) ->error();
		var ltn::Array array = ->ltn::Array();
		asm { "load 1" "load 0" "array::resize" }
		return array;
	}

	function clear(ltn::Array array) -> Void
		asm { "load 0" "array::clear" }


	function insert(ltn::Array array, Int index, Raw value) -> Void
		asm { "load 0" "load 1" "load 2" "array::insert" }


	function erase(ltn::Array array, Int index) -> Void 
		asm { "load 0" "load 1" "array::erase" }


	function empty(ltn::Array array) -> Int 
		asm { "load 0" "array::empty" "return" }


	function size(ltn::Array array) -> Int
		asm { "load 0" "array::size" "return" }


	function pushback(ltn::Array array, Raw value) -> Void
		asm { "load 0" "load 1" "array::pushback" }


	function popback(ltn::Array array) -> Raw
		asm { "load 0" "array::popback" "return" }


	function at(ltn::Array array, Int idx) -> Raw 
		asm { "load 0" "load 1" "array::get" "return" }


	function at(ltn::Array array, Int idx, Raw value) -> Void
		asm { "load 0" "load 1" "load 2" "array::set" }


	function front(ltn::Array array) -> Raw
		asm { "load 0" "array::front" }


	function back(ltn::Array array) -> Raw
		asm { "load 0" "array::back" }
}