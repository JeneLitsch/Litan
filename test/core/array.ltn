namespace sphinx::test {
	function array_size() {
		assert_equal_strict([]->size(), 0);
		assert_equal_strict([1,2,3]->size(), 3);
	}



	function array_is_empty() {
		assert_equal_strict([]->is_empty(), true);
		assert_equal_strict([1,2,3]->is_empty(), false);
	}



	function array_push() {
		var arr = [];
		assert_equal_strict(arr->push(1), null);
		assert_equal_strict(arr->push(2), null);
		assert_equal_strict(arr->push(3), null);
		assert_equal_strict([1,2,3], arr);
	}



	function array_pop() {
		var arr = [1,2,3];
		assert_equal_strict([1,2,3], arr);
		assert_equal_strict(arr->pop(), 3);
		assert_equal_strict([1,2], arr);
		assert_equal_strict(arr->pop(), 2);
		assert_equal_strict([1], arr);
		assert_equal_strict(arr->pop(), 1);
		assert_equal_strict([], arr);
	}



	function array_front() {
		assert_equal_strict([1,2,3]->front(), 1);
	}



	function array_back() {
		assert_equal_strict([1,2,3]->back(), 3);
	}



	function array_peek() {
		assert_equal_strict([1,2,3]->peek(), 3);
	}



	function array_at() {
		var arr = [1,2,3];
		assert_equal_strict(arr->at(0), 1);
		assert_equal_strict(arr->at(1), 2);
		assert_equal_strict(arr->at(2), 3);
	}


	function array_insert() {
		var arr = [];
		assert_equal_strict(arr->insert(0, 1), null);
		assert_equal_strict(arr->insert(1, 2), null);
		assert_equal_strict(arr->insert(2, 3), null);
		assert_equal_strict(arr, [1,2,3]);
	}



	function array_erase() {
		var arr = [1,2,2,3];
		assert_equal_strict(arr->erase(1), 2);
		assert_equal_strict(arr, [1,2,3]);
	}
}
