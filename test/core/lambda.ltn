namespace sphinx::test {
	function lambda_noary() {
		assert_equal((lambda() => 1337)(), 1337);
	}



	function lambda_unary() {
		assert_equal((lambda(x) => x)(42), 42);

	}


	function lambda_args() {
		assert_equal((lambda(a,b) => a + b)(20, 22), 42);
		assert_equal((lambda(a,b) => a + b)('A', 1), 'B');
		assert_equal((lambda(a,b) => a + b)("Hello", "World"), "HelloWorld");
	}



	function lambda_capture() {
		{
			var a = 1;
			var b = 2;
			var c = 2.0;
			var d = 42.42;
			assert_equal((lambda[a, b] => a + b)(), 3);
			assert_equal((lambda[a, c] => a + c)(), 3.0);
			assert_equal((lambda[d, c] => d + c)(), 44.42);
	 	}
		{
			var a = "Hello";
			var b = "World";
			assert_equal((lambda[a, b] => a + b)(), "HelloWorld");
		}
		{
			var a = [1,2,3];
			var b = [4,5,6];
			assert_equal((lambda[a, b] => a + b)(), [1,2,3,4,5,6]);
		}
	}



	function lambda_mixed() {
		var a = 1;
		var b = 2;
		var c = 2.0;

		var f1 = lambda[a](x) => x + a;
		var f2 = lambda[b](x) => x + b;
		var f3 = lambda[c](x) => x + c;

		assert_equal(f1(1), 2);
		assert_equal(f2(2), 4);
		assert_equal(f3(3), 5);
	}



	function lambda_typename() {
		assert_equal(std::typename(lambda => null), "fxptr");
	}
}