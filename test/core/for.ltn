namespace sphinx::test {
	namespace utils {
        function for_sum(begin, end, step) {
			var sum = 0;
			for (i : std::range(begin, end, step)) {
				sum = sum + i;
			}
			return sum;
		}



		function for_skip(begin, end, step) {
			var skipped = true;
			for (i : std::range(begin, end, step)) {
				skipped = false;
			}
			return skipped;
		}



		function for_sum(begin, end) {
			var sum = 0;
			for (i : std::range(begin, end)) {
				sum = sum + i;
			}
			return sum;
		}



		function ranged_sum(array) {
			var sum = 0;
			for(elem : array) sum = sum + elem;
			return sum;
		}
	}



    function for_loop() {
		assert_equal(utils::for_sum(0, 0, 1), 0);
		assert_equal(utils::for_sum(1, 3, 1), 3);
		assert_equal(utils::for_sum(0, 0), 0);
		assert_equal(utils::for_sum(1, 3), 3);
		assert_equal(utils::for_sum(3, 1, -1), 5);
		assert_equal(utils::for_sum(0, 10, 2), 20);
		assert_equal(utils::for_sum(10, 0, -2), 30);
		assert_equal(utils::for_sum(-1, 3, 1), 2);
		assert_equal(utils::for_sum(-3, -1, 1), -5);
		assert_equal(utils::for_sum(-3, 3, 1), -3);
		assert_equal(utils::for_sum(-5, 6, 1), 0);
		assert_equal(utils::for_sum(0, 10, 1), 45);
		assert_equal(utils::for_sum(0, 11, 1), 55);
		assert_equal(utils::for_sum(-1, 10, 1), 44);
	}



	function for_loop_except() {
		assert_except(lambda => utils::for_sum("A", 10, 1));
		assert_except(lambda => utils::for_sum(null, null, null));
	}


	
	function for_loop_skip() {
		assert_true(utils::for_skip(0, 0, 1));
		assert_false(utils::for_skip(0, 10, 1));
		assert_true(utils::for_skip(0, 0, -1));
	}



	function for_ranged() {
		assert_equal(15, utils::ranged_sum([1,2,3,4,5]));
		assert_equal(9, utils::ranged_sum([3,3,3]));
		assert_equal(0, utils::ranged_sum([]));
	}



	function for_ranged_expr() {
		var sum = 0;
		for(number : [1,2,3,4,5]) {
			sum = sum + number;
		}
		assert_equal(sum, 15);
	}



	function for_string() {
		var codes = [
			0x0414,
			0x0440,
			0x0430,
			0x043A,
			0x043E,
			0x043D,
		];
		var index = 0;
		for(c : "Дракон") {
			assert_equal_strict(codes[index], c);
			index = index + 1;
		}
	}



	function for_ranged_empty() {
		var sum = 0;
		for(number : []) {
			sum = sum + number;
		}
		assert_equal(sum, 0);
	}



	function for_ranged_iife() {
		var sum = 0;
		for(number : iife { 
			var array1 = [1,2,3,4,5];
			var array2 = array1;
			var array3 = array2;
			return array3;
		}) {
			sum = sum + number;
		}
		assert_equal(sum, 15);
	}



	function for_ranged_except() {
		for(number : [1,2,3,4,5]) {
			if(number == 5) throw 42;
		}
	}
	except(e) {
		assert_equal(e, 42);
	}




	function for_scope() {
		var x = 1337;
		var had_run = false;
		for(i : std::range(0, 1)) {
			assert_equal_strict(x, 1337);
			var x = 0;
			assert_equal_strict(x, 0);
			x = 42;
			assert_equal_strict(x, 42);
			had_run = true;
		}
		assert_equal_strict(x, 1337);
		assert_true(had_run);
	}



	function for_ranged_body_scope() {
		var x = 1337;
		var had_run = false;
		for(i:[1]) {
			assert_equal_strict(x, 1337);
			var x = 0;
			assert_equal_strict(x, 0);
			x = 42;
			assert_equal_strict(x, 42);
			had_run = true;
		}
		assert_equal_strict(x, 1337);
		assert_true(had_run);
	}



	function for_nested() {
		var array = [];
		for (x : [1,2,3]) {
			for (y : [10,20,30]) {
				array->push(x * y);
			}
		}
		assert_equal_strict(array, [
			10, 20, 30,
			20, 40, 60,
			30, 60, 90,
		]);
	}



	function for_ranged_head_scope() {
		var i = 42;
		for(i : [1,2,3]) {}
		assert_equal_strict(i, 42);
	}
}