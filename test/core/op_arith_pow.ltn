namespace sphinx::test {
	function pow_numeric() {
		test_name("operator: l ** r");

		assert_equal(true ** false, 1);
		assert_equal(3 ** 2, 9);
		assert_equal(3 ** 3, 27);
		assert_equal(2 ** 10, 1024);
		assert_equal(2 ** false, 1);
		assert_equal(2.0 ** -1, 0.5);
	}



	function pow_numeric_typename() {
		test_name("operator: l ** r type");

		assert_type(std::Int, true ** true);
		assert_type(std::Int, 'A' ** 'A');
		assert_type(std::Float, 1.0 ** 'A');
		assert_type(std::Int, 4 ** 4);
		assert_type(std::Float, 4 ** 4.0);
	}



	function pow_except() {
		test_name("operator: l ** r except");

		assert_success(lambda => (4) ** (4));
		assert_except(lambda => (4) ** (null));
		assert_except(lambda => (4.0) ** (null));
		assert_success(lambda => (4.0) ** (-1));
		assert_except(lambda => (null) ** (-1));
		assert_except(lambda => ("") ** (""));
		assert_except(lambda => ([]) ** ([]));
		assert_except(lambda => (std::make_map()) ** (std::make_map()));
		assert_except(lambda => (std::make_struct()) ** (std::make_struct()));
		assert_except(lambda => (std::make_stack()) ** (std::make_stack()));
		assert_except(lambda => (std::make_queue()) ** (std::make_queue()));
		assert_except(lambda => (std::cout()) ** (std::cout()));
	}
}