namespace sphinx::test {
	function literal_typename() {
		assert_equal(std::typename(null),   "null");
		assert_equal(std::typename(true),   "bool");
		assert_equal(std::typename('A'),    "int");
		assert_equal(std::typename(1),      "int");
		assert_equal(std::typename(1.0),    "float");
		assert_equal(std::typename([]),     "array");
		assert_equal(std::typename(""),     "string");
		assert_equal(std::typename([1, 2]), "array");
	}



	function literal_typeid() {
		assert_equal(std::typeid(null),                    std::type::nul);
		assert_equal(std::typeid(true),                    std::type::bool);
		assert_equal(std::typeid(false),                   std::type::bool);
		assert_equal(std::typeid('a'),                     std::type::int);
		assert_equal(std::typeid(1),                       std::type::int);
		assert_equal(std::typeid(42.42),                   std::type::float);
		assert_equal(std::typeid([]),                      std::type::array);
		assert_equal(std::typeid("test"),                  std::type::string);
		assert_equal(std::typeid(std::cin()),              std::type::istream);
		assert_equal(std::typeid(std::cout()),             std::type::ostream);
		assert_equal(std::typeid(std::chrono::clock()),    std::type::clock);
		assert_equal(std::typeid(std::queue()),            std::type::queue);
		assert_equal(std::typeid(std::stack()),            std::type::stack);
		assert_equal(std::typeid(std::map()),              std::type::map);
		assert_equal(std::typeid(std::random::mersenne()), std::type::rng);
	}



	function literal_unicode_2_byte() {
		assert_equal(std::typename('א'), "int");
		assert_equal('א', 0x05D0);
		assert_equal('ʡ', 0x02A1);
	}



	function literal_unicode_3_byte() {
		assert_equal(std::typename('ぐ'), "int");
		assert_equal('ぐ', 0x3050);
	}



	function literal_unicode_4_byte() {
		assert_equal(std::typename('𠀋'), "int");
		assert_equal('𠀋', 0x2000B);
	}
}