namespace sphinx::test {
	function special_member_add() {
		var op = lambda(self, other) => self.x + other.x;
		var a = [ .x = 2, .__add__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a+b), 6);
	}



	function special_member_sub() {
		var op = lambda(self, other) => self.x - other.x;
		var a = [ .x = 2, .__sub__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a-b), -2);
	}



	function special_member_mlt() {
		var op = lambda(self, other) => self.x * other.x;
		var a = [ .x = 2, .__mlt__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a*b), 8);
	}



	function special_member_div() {
		var op = lambda(self, other) => self.x / other.x;
		var a = [ .x = 8, .__div__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a/b), 2);
	}



	function special_member_mod() {
		var op = lambda(self, other) => self.x % other.x;
		var a = [ .x = 9, .__mod__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a%b), 1);
	}


	function special_member_pow() {
		var op = lambda(self, other) => self.x ** other.x;
		var a = [ .x = 2, .__pow__ = op ];
		var b = [ .x = 4 ];

		assert_equal_strict((a**b), 16);
	}



	function special_member_str() {
		var a = [ .x = 2, .__str__ = lambda(self) => "ABC" + std::str(self.x) ];
		assert_equal_strict(std::str(a), "ABC2");
	}



	function special_member_str_except() {
		var a = [ .x = 2, .__str__ = lambda(self) => 42 ];
		assert_except(lambda[a] () => std::str(a));
	}





	function special_member_cmp() {
		var make = lambda(x) => [
			.x = x,
			.__cmp__ = lambda(self, other) => self.x <=> other.x,
		];

		var test = lambda[make](a, b) {
			var obj_a = make(a);
			var obj_b = make(b);
			
			assert_equal_strict(obj_a <=> obj_b, a <=> b);
			assert_equal_strict(obj_a == obj_b, a == b);
			assert_equal_strict(obj_a != obj_b, a != b);
			assert_equal_strict(obj_a < obj_b, a < b);
			assert_equal_strict(obj_a <= obj_b, a <= b);
			assert_equal_strict(obj_a > obj_b, a > b);
			assert_equal_strict(obj_a >= obj_b, a >= b);
		};

		test(0,0);
		test(1,0);
		test(0,1);
	}



	function special_member_bool() {
		var make = lambda(b) => [
			.b = b,
			.__bool__ = lambda(self) => self.b,
		];

		assert_false(!!make(false)); 
		assert_true(!!make(true)); 
	}
}