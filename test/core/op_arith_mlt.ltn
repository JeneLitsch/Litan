namespace sphinx::test {
	function mlt_numeric() {
		test_name("operator: l * r");

		assert_equal(true * true, 1);
		assert_equal(true * false, 0);
		assert_equal('A' * 2, 2 * 65);
		assert_equal(3 * 4, 12);
		assert_equal(-3 * 4, -12);
		assert_equal(-3 * -4, 12);
		assert_equal(3.5 * 2, 7);
		assert_equal(3.5 * -2, -7);
	}



	function mlt_except() {
		test_name("operator: l * r except");

		assert_except(lambda => (null) * (null));
		assert_success(lambda => (3) * (4));
		assert_success(lambda => (3.0) * (4));
		assert_success(lambda => (3.0) * (true));
		assert_success(lambda => (true) * (true));
		assert_except(lambda => ([]) * ([]));
		assert_except(lambda => ("") * (""));
		assert_except(lambda => (std::map()) * (std::map()));
		assert_except(lambda => (std::stack()) * (std::stack()));
		assert_except(lambda => (std::queue()) * (std::queue()));
	}



	function mlt_string() {
		test_name("operator: l * r (string x any)");

		assert_equal_strict("XYZ" * true, "XYZ");
		assert_equal_strict(true * "XYZ", "XYZ");
		assert_equal_strict("XYZ" * false, "");
		assert_equal_strict(false * "XYZ", "");

		assert_equal_strict("ABC" * 3, "ABCABCABC");
		assert_equal_strict(3 * "XYZ", "XYZXYZXYZ");
	}



	function mlt_array() {
		test_name("operator: l * r (array x any)");

		assert_equal_strict([1,2,3] * true, [1,2,3]);
		assert_equal_strict(true * [1,2,3], [1,2,3]);
		assert_equal_strict([1,2,3] * false, []);
		assert_equal_strict(false * [1,2,3], []);

		assert_equal_strict([1,2,3] * 3, [1,2,3,1,2,3,1,2,3]);
		assert_equal_strict(3 * [1,2,3], [1,2,3,1,2,3,1,2,3]);
	}



	function mlt_array_nested() {
		test_name("operator: l * r (array(array) x any)");

		assert_equal_strict([1, [1]] * 3, [1, [1], 1, [1], 1, [1]]);
	}



	function mlt_array_empty() {
		test_name("operator: l * r ([] x any)");

		assert_equal_strict([] * 3, []);
	}
}