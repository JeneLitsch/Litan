namespace sphinx::test {
	function add_numeric() {
		test_name("operator: l + r");

		assert_equal(true + true, 2);
		assert_equal('A' + 'A', 65 + 65);
		assert_equal(21 + 21, 42);
		assert_equal(21 + 21.0, 42.0);
		assert_equal(-21 + 21, 0);
		assert_equal(-21 + -21, -42);
		assert_equal(20.5 + 21.5, 42.0);
		assert_equal(-20.5 + -21.5, -42.0);
	}



	function add_numeric_type() {
		test_name("operator: l + r type");

		assert_type(std::Int, true + true);
		assert_type(std::Int, true + 1);
		assert_type(std::Int, 'A' + 'A');
		assert_type(std::Int, 21 + 21);
		assert_type(std::Float, 21 + 21.0);
		assert_type(std::Float, 20.5 + 21.5);
	}



	function add_string() {
		test_name("operator: l + r (string + string)");

		assert_equal("Hello " + "World", "Hello World");
		assert_equal("" + "", "");
	}






	function add_except() {
		test_name("operator: l + r except");

		assert_except(lambda => ("") + ([]));
		assert_success(lambda => ([]) + ([]));
		assert_except(lambda => (1) + ([]));
		assert_success(lambda => (1) + (2));
		assert_except(lambda => (std::cout()) + (std::cout()));
		assert_except(lambda => (std::make_struct()) + (std::make_struct()));
		assert_except(lambda => (std::make_map()) + (std::make_map()));
		assert_except(lambda => ("") + (1));
	}
}