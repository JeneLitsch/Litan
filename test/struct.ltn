namespace test {
	function combine(a, b, c) {
		var s = abc(a,b,c);
		return s.a + s.b - s.c;
	}


	function abc(a, b, c) {
		var s = std::struct();
		s.a = a;
		s.b = b;
		s.c = c;
		return s;
	}



	function struct_read_write() {
		var cases = [
			[[1,2,3], 0],
			[[-1,2,5], -4],
			[[true, true, true], 1],
		];
		return test_all_cases("Struct: read and write", &combine(_,_,_), cases); 
	}



	function has_a(s) {
		return std::bool(s.a);
	}



	function with_a() {
		var s = std::struct();
		s.a = 1;
		return s;
	}



	function without_a() {
		return std::struct();
	}

	
	
	function struct_null() {
		var cases = [
			[[with_a()], true],
			[[without_a()], false],
			[[abc(1, 2, 3)], true],
		];
		return test_all_cases("Struct: null", &has_a(_), cases); 
	}



	function pair() {
		var fx = lambda(p) => p.first - p.second;
		var cases = [
			[[std::pair(1, 2)], -1],
			[[std::pair(1, -1)], 2],
			[[std::pair(43, 1)], 42],
		];
		return test_all_cases("Pair: std::pair", fx, cases); 
		
	}



	function mono() {
		var fx = lambda(m) => m.value * 2;
		var cases = [
			[[std::mono(2)], 4],
			[[std::mono(1)], 2],
			[[std::mono(42)], 84],
		];
		return test_all_cases("Mono: std::mono", fx, cases); 
		
	}



	function struct() {
		return
			struct_read_write() +
			struct_null() +
			mono();
			pair();
	}
}