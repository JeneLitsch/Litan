namespace test {
	function add() {
		var cases = [
			[[1, 2], 3],
			[[0x10, 0x10], 32],
			[[0xff, -0xff], 0],
			[[0b10, 0b10], 4],
			[[1, -2], -1],
			[[true, true], 2],
			[[true, 1.9], 2.9],
			[[-1, -1.9], -2.9],
			[['A', 2], 'C'],
			[['A', 2], 67],
			[['A', 'A'], 65 * 2],
			[["123", "45"], "12345"],
			[[[1,2,3], [4]], [1,2,3,4]],
			[[[1,2,3], ["4"]], [1,2,3,"4"]],
			[["4", std::string([1, 2, 3])], "4[1, 2, 3]"],
		];

		var add    = lambda(a, b) => a + b;
		var add_eq = lambda (a, b) {
			a += b;
			return a;
		};

		return
			test_all_cases("Add+", add, cases) + 
			test_all_cases("Add+=", add_eq, cases);
	}

	

	function sub() {
		var cases = [
			[[1, 2], -1],
			[[1, -2], 3],
			[[true, true], 0],
			[[true, false], 1],
			[[false, true], -1],
			[['C', 2], 'A'],
		];
		
		var sub    = lambda(a, b) => a - b;
		var sub_eq = lambda(a, b) {
			a -= b;
			return a;
		};

		return 
			test_all_cases("Subtract-", sub, cases) +
			test_all_cases("Subtract-=", sub_eq, cases);
	}



	function mlt() {
		var cases = [
			[[1, 2], 2],
			[[1.5, -2], -3],
			[[true, true], 1],
			[[true, false], 0],
			[[false, true], 0],
			[['C', 2], 'C' + 'C'],
		];
		
		var mlt    = lambda (a, b) => a * b;
		var mlt_eq = lambda (a, b) {
			a *= b;
			return a;
		};

		return
			test_all_cases("Multiply*", mlt, cases) +
			test_all_cases("Multiply*=", mlt_eq, cases);
	}

	

	function div() {
		var cases = [
			[[1, 2], 0],
			[[1, 2.0], 0.5],
			[[true, 2], 0],
			[[true, 2.0], 0.5],
		];
		
		var div    = lambda (a, b) => a / b;
		var div_eq = lambda (a, b) {
			a /= b;
			return a;
		};

		return
			test_all_cases("Divide/", div, cases) +
			test_all_cases("Divide/=", div_eq, cases);
	}



	function mod() {
		var cases = [
			[[5, 2], 1],
			[[1.5, 1.0], 0.5],
			[[-3.5, 7.0], -3.5],
			[[-24.0, -7.0], -3],
			[[-24, -7], -3],
		];
		
		var mod    = lambda (a, b) => a % b;
		var mod_eq = lambda (a, b) {
			a %= b;
			return a;
		};

		return
			test_all_cases("Modulo%", mod, cases) +
			test_all_cases("Modulo%=", mod_eq, cases);
	}



	function pow() {
		var cases = [
			[[2, 2], 4],
			[[3, 3], 27],
			[[9.0, 0.5], 3],
		];
		
		var pow    = lambda (a, b) => a ** b;
		var pow_eq = lambda (a, b) {
			a **= b;
			return a;
		};

		return
			test_all_cases("Power**",  pow, cases) +
			test_all_cases("Power**=", pow_eq, cases);
	}



	function neg() {
		var cases = [
			[[1], -1], 
			[[-1], 1], 
			[[true], -1], 
			[[3.5], -3.5], 
		];

		var neg = lambda (a) => -a;
		return test_all_cases("Negate%", neg, cases);
	}



	function arith() {
		return
			add() + sub() + mlt() + div() + mod() + pow() + neg() +
			shift_l() + shift_r();
	}
}