namespace sphinx::test {
	namespace utils {
		function deduce_parameter(i : <T>, name : string) {
			assert_equal(
				(reflect(type T).name, reflect(expr i).type.name),
				(name, name)
			);
		}



		function return_as_same_type(t : <T>) -> T => t
		
		function deduce_parameter_return_type(t : <T>, name : string) {
			assert_equal(reflect(expr utils::return_as_same_type(t)).type.name, name);
		}
	}



	function deduce_parameter() {
		utils::deduce_parameter(true, "bool");
		utils::deduce_parameter(42, "int");
		utils::deduce_parameter(42.42, "float");
		utils::deduce_parameter("", "string");
		utils::deduce_parameter([1], "array<int>");
	}



	function deduce_parameter_return_type() {
		utils::deduce_parameter_return_type(true, "bool");
		utils::deduce_parameter_return_type(42, "int");
		utils::deduce_parameter_return_type(13.37, "float");
		utils::deduce_parameter_return_type("", "string");
		utils::deduce_parameter_return_type([1,2,3], "array<int>");
	}
}