namespace sphinx::test {
	namespace utils {
        function for_sum(begin, end, step) {
			var sum = 0;
			for (i : begin -> end : step) {
				sum = sum + i;
			}
			return sum;
		}



		function for_skip(begin, end, step) {
			var skipped : bool = true;
			for (i : begin -> end : step) {
				skipped = false;
			}
			return skipped;
		}



		function for_sum(begin, end) {
			var sum = 0;
			for (i : begin -> end) {
				sum = sum + i;
			}
			return sum;
		}
	}



    function for_loop() {
		assert_equal(utils::for_sum(0, 0, 1), 0);
		assert_equal(utils::for_sum(1, 3, 1), 3);
		assert_equal(utils::for_sum(0, 0), 0);
		assert_equal(utils::for_sum(1, 3), 3);
		assert_equal(utils::for_sum(3, 1, -1), 5);
		assert_equal(utils::for_sum(0, 10, 2), 20);
		assert_equal(utils::for_sum(10, 0, -2), 30);
		assert_equal(utils::for_sum(-1, 3, 1), 2);
		assert_equal(utils::for_sum(-3, -1, 1), -5);
		assert_equal(utils::for_sum(-3, 3, 1), -3);
		assert_equal(utils::for_sum(-5, 6, 1), 0);
		assert_equal(utils::for_sum(0, 10, 1), 45);
		assert_equal(utils::for_sum(0, 11, 1), 55);
		assert_equal(utils::for_sum(-1, 10, 1), 44);
	}



	function for_loop_except() {
		assert_except(lambda => utils::for_sum("A", 10, 1));
		assert_except(lambda => utils::for_sum(null, null, null));
	}


	
	function for_loop_skip() {
		assert_true(utils::for_skip(0, 0, 1));
		assert_false(utils::for_skip(0, 10, 1));
		assert_true(utils::for_skip(0, 0, -1));
	}
}