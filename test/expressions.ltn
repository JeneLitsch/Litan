namespace test {
	function s() {
		var s = std::struct();
		var s2;
		s2 = std::struct();
		s2.x = 42;
		s2.y = std::struct();
		s2.y.a = 1000;
		s2.y.a += 337;
		s2.y.b = [1,2,-1];
		s.a = 1;
		s.b = [s2];
		s.b[0].y.b[2] = 3;
		s.b[0].y.b[2] *= 2;
		return s;
	}



	function double(x) {
		return 2 * x;
	}



	function make_duplicator() {
		return lambda (x) => 2*x;
	}



	function add_1(x) {
		return x + 1;
	}



	function expressions() {
		var f1  = lambda => 8 / 2 / 2;
		var f2  = lambda => false ? false ? 44 : 43 : 42;
		var f3  = lambda => null ?? 1 == 1 ? 2 * 20 + (1 << 1) : 1337;
		var f4  = lambda => null ?? ?null;
		var f5  = lambda => -1.0 / 4.0;
		var f6  = lambda => -(-1 + -5 - 5);
		var f7  = lambda => null ?? iife { return true ? true ? 42 : 0 : 0; };
		var f8  = lambda => 1 <= 0 && 0 <= 2;
		var f9  = lambda => (1 <= 0 && 0) <= 2;
		var f10 = lambda => 1 + 2 + 3 - 12 * 2;
		var f11 = lambda => 1 * 2 * 3 * 4;
		var f12 = lambda => 1 + 2*2 + 3 - 12 * 2;
		var f13 = lambda => 1 * -2 * 3 * 4;
		var f14 = lambda => s().b[0].x;
		var f15 = lambda => s().b[0].y.a;
		var f16 = lambda => s().b[0].y.b[2];
		var f17 = lambda => !!!!!!!true;
		var f18 = lambda => !!!!!!!!true;
		var f19 = lambda => 2**3 * 4;
		var f26 = lambda => (std::chain(&add_1(_), &double(_)))(2);
		var f27 = lambda => (lambda(a, b) => a + b)(20, 22);
		var f28 = lambda => (lambda => 42)();
		var f29 = lambda => (&add_1(_))(41);
		var f30 = lambda => ((&make_duplicator())())(21);

		var cases = [
			[f1, 2],
			[f2, 42],
			[f3, 42],
			[f4, false],
			[f5, -0.25],
			[f6, 11],
			[f7, 42],
			[f8, false],
			[f9, true],
			[f10, -18],
			[f11, 24],
			[f12, -16],
			[f13, -24],
			[f14, 42],
			[f15, 1337],
			[f16, 6],
			[f17, false],
			[f18, true],
			[f19, 32],
			[f26, 6],
			[f27, 42],
			[f28, 42],
			[f29, 42],
			[f30, 42],
		];

		return test_functions("Expressions", cases);
	}
}