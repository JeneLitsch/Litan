namespace sphinx::test {
	function dynamic_copy_bool() {
		assert_equal_strict(*(true ~* bool), true);
		assert_equal_strict(*(false ~* bool), false);

		assert_equal_strict(*((0 : char) ~* bool), false);
		assert_equal_strict(*(('a' : char) ~* bool), true);

		assert_equal_strict(*(0 ~* bool), false);
		assert_equal_strict(*(1 ~* bool), true);
		assert_equal_strict(*(42 ~* bool), true);

		assert_equal_strict(*(0.0 ~* bool), false);
		assert_equal_strict(*(0.1 ~* bool), true);
		assert_equal_strict(*(1.1 ~* bool), true);
		assert_equal_strict(*(42.1 ~* bool), true);
	}



	function dynamic_copy_bool_truthy() {
		assert_equal_strict(*([] ~* bool), true);
		assert_equal_strict(*("" ~* bool), true);
		assert_equal_strict(*(null ~* bool), false);
		assert_equal_strict(*(std::cout() ~* bool), true);
		assert_equal_strict(*(std::cin() ~* bool), true);
		assert_equal_strict(*(std::map() ~* bool), true);
	}



	function dynamic_copy_bool_type() {
		assert_equal_strict(
			reflect(expr null:any ~* bool).type.name,
			"optional<bool>"
		);
	}



	function dynamic_copy_char() {
		assert_equal_strict(*(false ~* char), 0 : char);
		assert_equal_strict(*(true ~* char), 1 : char);

		assert_equal_strict(*('\n' ~* char), '\n');

		assert_equal_strict(*(65 ~* char), 'A');

		assert_equal_strict(*(66.5 ~* char), 'B');
	}



	function dynamic_copy_char_type() {
		assert_equal_strict(
			reflect(expr null:any ~* char).type.name,
			"optional<char>"
		);
	}



	function dynamic_copy_int() {
		assert_equal_strict(*(false ~* int), 0);
		assert_equal_strict(*(true ~* int), 1);

		assert_equal_strict(*('A' ~* int), 65);
		
		assert_equal_strict(*(1337 ~* int), 1337);
		assert_equal_strict(*(-1337 ~* int), -1337);
		
		assert_equal_strict(*(42.42 ~* int), 42);
		assert_equal_strict(*(-42.42 ~* int), -42);
	}



	function dynamic_copy_int_type() {
		assert_equal_strict(
			reflect(expr null:any ~* int).type.name,
			"optional<int>"
		);
	}



	function dynamic_copy_float() {
		assert_equal_strict(*(false ~* float), 0.0);
		assert_equal_strict(*(true ~* float), 1.0);

		assert_equal_strict(*('A' ~* float), 65.0);
		
		assert_equal_strict(*(1337 ~* float), 1337.0);
		assert_equal_strict(*(-1337 ~* float), -1337.0);
		
		assert_equal_strict(*(42.42 ~* float), 42.42);
		assert_equal_strict(*(-42.42 ~* float), -42.42);
	}



	function dynamic_copy_float_type() {
		assert_equal_strict(
			reflect(expr null:any ~* float).type.name,
			"optional<float>"
		);
	}



	function dynamic_copy_array() {
		assert_equal_strict(
			*([0,1,2,3] ~* array<int>),
			[0,1,2,3]
		);

		assert_equal_strict(
			*([0.1,1.1,2.1,3.1] ~* array<int>),
			[0,1,2,3]
		);
		
		assert_equal_strict(
			*([0,1,2,3] ~* array<bool>),
			[false, true, true, true]
		);
		
		assert_equal_strict(
			*([0.0,1.0,2.0,3.0] ~* array<bool>),
			[false, true, true, true]
		);


		assert_equal_strict(
			*([] ~* array<int>),
			[]
		);
	}



	function dynamic_copy_array_independece() {
		var arr = [1,2,3];
		var arr_a = *(arr ~* array<float>); 
		var arr_b = *(arr ~* array<int>); 
		var arr_c = *(arr ~* array<int>); 

		arr_a[0] = 42;
		arr_b[0] = 1337;
		arr_c[0] = 666;

		assert_equal_strict(arr[0], 1);
		assert_equal_strict(arr_a[0], 42.0);
		assert_equal_strict(arr_b[0], 1337);
		assert_equal_strict(arr_c[0], 666);
	}



	function dynamic_copy_array_type() {
		assert_equal_strict(
			reflect(expr null:any ~* array<float>).type.name,
			"optional<array<float>>"
		);
	}



	function dynamic_copy_array_string() {
		assert_equal_strict(
			*(['A','B','C'] ~* string),
			"ABC"
		);

		assert_equal_strict(
			*([65,66,67] ~* string),
			"ABC"
		);

		assert_equal_strict(
			*([65.0,66.0,67.0] ~* string),
			"ABC"
		);

		assert_equal_strict(
			*([] ~* string),
			""
		);
	}



	function dynamic_copy_string_array() {
		assert_equal_strict(
			*("ABC" ~* array<char>),
			['A','B','C']
		);

		assert_equal_strict(
			*("ABC" ~* array<int>),
			[65,66,67]
		);

		assert_equal_strict(
			*("ABC" ~* array<float>),
			[65.0,66.0,67.0]
		);
	}



	function dynamic_copy_string_independece() {
		var str = "ABC";
		var str_a = *(str ~* string); 
		var str_b = *(str ~* string); 
		var str_c = *(str ~* string); 

		str_a[0] = 'X';
		str_b[0] = 'Y';
		str_c[0] = 'Z';

		assert_equal_strict(str[0], 'A');
		assert_equal_strict(str_a[0], 'X'); 
		assert_equal_strict(str_b[0], 'Y'); 
		assert_equal_strict(str_c[0], 'Z');
	}



	function dynamic_copy_fail() {
		assert_equal_strict("ABC" ~* int, null);
		assert_equal_strict([] ~* int, null);
		assert_equal_strict(std::cout() ~* int, null);
		assert_equal_strict(std::cin() ~* int, null);
		assert_equal_strict([1,2,3] ~* int, null);
	}
}