namespace test {

	function bitor() {
		var cases = [
			[[0b11, 0b1100], 0b1111],
		];
		
		var bitor    = lambda (a, b) => a | b;
		var bitor_eq = lambda (a, b) {
			a |= b;
			return a;
		};


		return
			test_all_cases("Bitwise |",  bitor, cases) +
			test_all_cases("Bitwise |=", bitor_eq, cases);
	}


	function bitand() {
		var cases = [
			[[0b011, 0b110], 0b010],
			[[0b001, 0b100], 0b000],
		];
		
		var bitand    = lambda (a, b) => a & b;
		var bitand_eq = lambda (a, b) {
			a &= b;
			return a;
		};

		return
			test_all_cases("Bitwise &",  bitand, cases) +
			test_all_cases("Bitwise &=", bitand_eq, cases);
	}



	function bitxor() {
		var cases = [
			[[0b011, 0b110], 0b101],
			[[0b001, 0b100], 0b101],
		];
		
		var bitor    = lambda (a, b) => a ^ b;
		var bitor_eq = lambda (a, b) {
			a ^= b;
			return a;
		};

		return
			test_all_cases("Bitwise &",  bitor,    cases) +
			test_all_cases("Bitwise &=", bitor_eq, cases);
	}


	function bitnot() {
		var cases = [
			[[0], -1],
			[[1], -2],
			[[-1], 0],
		];
		
		var fx = lambda (x) => ~x;

		return test_all_cases("Bitwise ~x", fx, cases);
	}



	function bitwise() {
		return shift_l() + shift_r() + bitand() + bitor() + bitxor() + bitnot(); 
	}
}