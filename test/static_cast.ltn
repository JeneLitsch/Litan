namespace sphinx::test {
	function static_cast_bool() {
		assert_equal_strict(true : bool,  true);
		assert_equal_strict(false : bool, false);
		assert_equal_strict(1 : bool,     true);
		assert_equal_strict(0 : bool,     false);
		assert_equal_strict(2 + 2 : bool, true);
		assert_equal_strict(1.0 : bool,   true);
		assert_equal_strict(0.0 : bool,   false);
		assert_equal_strict(null : bool,  false);
		assert_equal_strict("" : bool,    true);
		assert_equal_strict([] : bool,    true);
	}



	function static_cast_bool_type() {
		assert_equal(decltype(true : bool).name,  "bool");
		assert_equal(decltype(false : bool).name, "bool");
		assert_equal(decltype(1 : bool).name,     "bool");
		assert_equal(decltype(0 : bool).name,     "bool");
		assert_equal(decltype(1.0 : bool).name,   "bool");
		assert_equal(decltype(0.0 : bool).name,   "bool");
		assert_equal(decltype(null : bool).name,  "bool");
		assert_equal(decltype("" : bool).name,    "bool");
		assert_equal(decltype([] : bool).name,    "bool");
	}



	function static_cast_char() {
		assert_equal_strict('A' : char,   'A');
		assert_equal_strict(65 : char,   'A');
		assert_equal_strict(65.1 : char, 'A');
	}



	function static_cast_char_type() {
		assert_equal(decltype('A' : char).name,  "char");
		assert_equal(decltype(65 : char).name,   "char");
		assert_equal(decltype(65.1 : char).name, "char");
	}



	function static_cast_int() {
		assert_equal_strict(true : int,  1);
		assert_equal_strict(false : int, 0);
		assert_equal_strict('A' : int,   65);
		assert_equal_strict(42 : int,    42);
		assert_equal_strict(42.42 : int, 42);
	}



	function static_cast_int_type() {
		assert_equal_strict(decltype(true : int).name,  "int");
		assert_equal_strict(decltype(false : int).name, "int");
		assert_equal_strict(decltype('A' : int).name,   "int");
		assert_equal_strict(decltype(42 : int).name,    "int");
		assert_equal_strict(decltype(42.42 : int).name, "int");
	}



	function static_cast_float() {
		assert_equal_strict(true : float,  1.0);
		assert_equal_strict(false : float, 0.0);
		assert_equal_strict('A' : float,   65.0);
		assert_equal_strict(42 : float,    42.0);
		assert_equal_strict(42.42 : float, 42.42);
	}



	function static_cast_float_type() {
		assert_equal_strict(decltype(true : float).name,  "float");
		assert_equal_strict(decltype(false : float).name, "float");
		assert_equal_strict(decltype('A' : float).name,   "float");
		assert_equal_strict(decltype(42 : float).name,    "float");
		assert_equal_strict(decltype(42.42 : float).name, "float");
	}
}