namespace sphinx::test {
	function index_array() {
		test_name("operator: [] (array)");

		var array = [1, 2, 3, 4, "_5_"];

		assert_equal(array[0], 1);
		assert_equal(array[1], 2);
		assert_equal(array[2], 3);
		assert_equal(array[3], 4);
		assert_equal(array[4], "_5_");
	}



	function index_array_negative() {
		test_name("operator: [] (array) negative");

		var array = [1, 2, 3, 4, "_5_"];

		assert_equal(array[-5], 1);
		assert_equal(array[-4], 2);
		assert_equal(array[-3], 3);
		assert_equal(array[-2], 4);
		assert_equal(array[-1], "_5_");
	}



	function index_array2d() {
		test_name("operator: [] (array2d)");

		var array = [
			[1, 2, 3, 4, "_5_"],
			[6.6, 7.7, 8.8, 9.9, 10]
		];

		assert_equal(array[0][0], 1);
		assert_equal(array[0][1], 2);
		assert_equal(array[0][2], 3);
		assert_equal(array[0][3], 4);
		assert_equal(array[0][4], "_5_");

		assert_equal(array[1][0], 6.6);
		assert_equal(array[1][1], 7.7);
		assert_equal(array[1][2], 8.8);
		assert_equal(array[1][3], 9.9);
		assert_equal(array[1][4], 10);
	}



	function index_array_assign() {
		test_name("operator: [] (array x int) assign");

		var array = [0,0,0];
		array[0] = 42;
		assert_equal(array, [42,0,0]); 
	}



	function index_array_assign_negative() {
		test_name("operator: [] (array x int) negative assign");

		var array = [0,0,0];
		array[-3] = 42;
		assert_equal(array, [42,0,0]); 
	}



	function index_array_except() {
		test_name("operator: array[i] except");
		var array = [1,2,3];
		assert_success(lambda [array] => array[-1]);
		assert_success(lambda [array] => array[-3]);
		assert_except(lambda [array] => array[-4]);
		assert_except(lambda [array] => array[-10]);
		assert_success(lambda [array] => array[0]);
		assert_success(lambda [array] => array[1]);
		assert_success(lambda [array] => array[2]);
		assert_except(lambda [array] => array[3]);
		assert_success(lambda [array] { array[-1] = 5; });
		assert_success(lambda [array] { array[0] = 5; });
		assert_success(lambda [array] { array[1] = 5; });
		assert_success(lambda [array] { array[2] = 5; });
		assert_except(lambda [array] { array[3] = 5; });
	}



	function index_map() {
		test_name("operator: map[i]");

		var map = std::map();
		map[1] = "A";
		map[2] = "B";
		map[3] = "C";

		map["X"] = "x";
		map[[1,2,3]] = "y";
		map[false] = "z";

		assert_equal(map[1], "A");
		assert_equal(map[2], "B");
		assert_equal(map[3], "C");

		assert_equal(map["X"], "x");
		assert_equal(map[[1,2,3]], "y");
		assert_equal(map[false], "z");

		assert_equal(map[4], null);
	}



	function index_string() {
		test_name("operator: string[i]");

		var str = "ABC";

		assert_equal_strict(str[0], 'A');
		assert_equal_strict(str[1], 'B');
		assert_equal_strict(str[2], 'C');
	}




	function index_string_negative() {
		test_name("operator: string[-i]");
		
		var str = "ABC";

		assert_equal_strict(str[-3], 'A');
		assert_equal_strict(str[-2], 'B');
		assert_equal_strict(str[-1], 'C');
	}



	function index_string_assign() {
		test_name("operator: string[i] = r");

		var str = "...";
		str[0] = 'A';
		str[1] = 'B';
		str[2] = 'C';
		assert_equal(str, "ABC");
	}



	function index_string_assign_negative() {
		test_name("operator: string[-i] = r");

		var str = "...";
		str[-3] = 'A';
		str[-2] = 'B';
		str[-1] = 'C';
		assert_equal(str, "ABC");
	}



	function index_string_except() {
		test_name("operator: string[i] = r except");
		var str = "ABC";

		assert_success(lambda[str] => str[-1]);
		assert_success(lambda[str] => str[-3]);
		assert_except(lambda[str] => str[-4]);
		assert_except(lambda[str] => str[-10]);
		assert_success(lambda[str] => str[0]);
		assert_success(lambda[str] => str[1]);
		assert_success(lambda[str] => str[2]);
		assert_except(lambda[str] => str[3]);
	}
}