namespace sphinx::test {
	namespace detail {
		function test_dynamic_cast_type(type : <T>, value) {
			var gotten = reflect(expr value ~ T).type.name;
			var expected = reflect(type optional<T>).name;
			assert_equal_strict(gotten, expected);
		}
	}


	function dynamic_cast_bool() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";
		var arr : any = [65, 65, 65];

		assert_equal_strict(tru ~ bool, true);
		assert_equal_strict(fls ~ bool, false);
		assert_equal_strict(chr ~ bool, null);
		assert_equal_strict(int ~ bool, null);
		assert_equal_strict(flt ~ bool, null);
		assert_equal_strict(str ~ bool, null);
		assert_equal_strict(arr ~ bool, null);
	}

	
	
	function dynamic_cast_bool_type() {
		detail::test_dynamic_cast_type(true, 42);
	}


	
	function dynamic_cast_char() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";
		var arr : any = [65, 65, 65];

		assert_equal_strict(tru ~ char, null);
		assert_equal_strict(fls ~ char, null);
		assert_equal_strict(chr ~ char, chr);
		assert_equal_strict(int ~ char, null);
		assert_equal_strict(flt ~ char, null);
		assert_equal_strict(str ~ char, null);
		assert_equal_strict(arr ~ char, null);
	}



	function dynamic_cast_char_type() {
		detail::test_dynamic_cast_type('A', 42);
	}


	
	function dynamic_cast_int() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";
		var arr : any = [65, 65, 65];

		assert_equal_strict(tru ~ int, null);
		assert_equal_strict(fls ~ int, null);
		assert_equal_strict(chr ~ int, null);
		assert_equal_strict(int ~ int, int);
		assert_equal_strict(flt ~ int, null);
		assert_equal_strict(str ~ int, null);
		assert_equal_strict(arr ~ int, null);
	}



	function dynamic_cast_int_type() {
		detail::test_dynamic_cast_type(0, 42);
	}


	
	function dynamic_cast_float() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";
		var arr : any = [65, 65, 65];

		assert_equal_strict(tru ~ float, null);
		assert_equal_strict(fls ~ float, null);
		assert_equal_strict(chr ~ float, null);
		assert_equal_strict(int ~ float, null);
		assert_equal_strict(flt ~ float, flt);
		assert_equal_strict(str ~ float, null);
		assert_equal_strict(arr ~ float, null);
	}



	function dynamic_cast_float_type() {
		detail::test_dynamic_cast_type(0.0, 42);
	}


	
	function dynamic_cast_string() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";
		var arr : any = [65, 65, 65];

		assert_equal_strict(tru ~ string, null);
		assert_equal_strict(fls ~ string, null);
		assert_equal_strict(chr ~ string, null);
		assert_equal_strict(int ~ string, null);
		assert_equal_strict(flt ~ string, null);
		assert_equal_strict(str ~ string, str);
		assert_equal_strict(arr ~ string, null);
	}



	function dynamic_cast_string_type() {
		detail::test_dynamic_cast_type("", 42);
	}


	
	function dynamic_cast_array() {
		var tru : any = true;
		var fls : any = false;
		var chr : any = 'A';
		var int : any = 42;
		var flt : any = 42.0;
		var str : any = "abc";

		assert_equal_strict(tru ~ array<int>, null);
		assert_equal_strict(fls ~ array<int>, null);
		assert_equal_strict(chr ~ array<int>, null);
		assert_equal_strict(int ~ array<int>, null);
		assert_equal_strict(flt ~ array<int>, null);
		assert_equal_strict(str ~ array<int>, null);
		
		var arr_bol : any = [true, false, true];
		assert_equal_strict(arr_bol ~ array<bool>, arr_bol);
		assert_equal_strict(arr_bol ~ array<int>, null);
		assert_equal_strict(arr_bol ~ array<float>, null);
		assert_equal_strict(arr_bol ~ array<string>, null);

		var arr_int : any = [65, 65, 65];
		assert_equal_strict(arr_int ~ array<bool>, null);
		assert_equal_strict(arr_int ~ array<int>, arr_int);
		assert_equal_strict(arr_int ~ array<float>, null);
		assert_equal_strict(arr_int ~ array<string>, null);

		var arr_flt : any = [65.0, 65.0, 65.0];
		assert_equal_strict(arr_flt ~ array<bool>, null);
		assert_equal_strict(arr_flt ~ array<int>, null);
		assert_equal_strict(arr_flt ~ array<float>, arr_flt);
		assert_equal_strict(arr_flt ~ array<string>, null);
		
		var arr_str : any = ["123", "ABC", "XYZ"];
		assert_equal_strict(arr_str ~ array<bool>, null);
		assert_equal_strict(arr_str ~ array<int>, null);
		assert_equal_strict(arr_str ~ array<float>, null);
		assert_equal_strict(arr_str ~ array<string>, arr_str);
	}



	function dynamic_cast_array_type() {
		detail::test_dynamic_cast_type([true], 42);
		detail::test_dynamic_cast_type(['C'], 42);
		detail::test_dynamic_cast_type([0], 42);
		detail::test_dynamic_cast_type([0.0], 42);
		detail::test_dynamic_cast_type([""], 42);
	}



	function dynamic_cast_nested_array() {
		var arr_int = [
			[1, 2, 3],
			[4, 5, 6],
			[7, 8, 9],
		];
		var arr_flt = [
			[1.0, 2.0, 3.0],
			[4.0, 5.0, 6.0],
			[7.0, 8.0, 9.0],
		];

		// assert_equal_strict(arr_int ~ array<array<int>>, arr_int);
		// assert_equal_strict(arr_flt ~ array<array<int>>, null);

		// assert_equal_strict(arr_int ~ array<array<float>>, null);
		// assert_equal_strict(arr_flt ~ array<array<float>>, arr_flt);
	}



	function dynamic_cast_nested_array_type() {
		detail::test_dynamic_cast_type([[true]], 42);
		detail::test_dynamic_cast_type([['C']], 42);
		detail::test_dynamic_cast_type([[1]], 42);
		detail::test_dynamic_cast_type([[0.0]], 42);
		detail::test_dynamic_cast_type([[""]], 42);
	}
}