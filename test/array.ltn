namespace test {
	function array_size() {
		var cases = [
			[[[1,2,3]], 3],
			[[[1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f',16]], 16],
			[[[1,2,3] + [4,5]], 5],
			[[std::array()], 0],
			[[std::array(42)], 1],
		];
		return test_all_cases("Array(size)", &std::size(_), cases);
	}


	function array_front() {
		var cases = [
			[[[1,2,3]], 1],
			[[[-1, 1,2,3]], -1],
		];
		return test_all_cases("Array(front)", &std::front(_), cases);
	}


	function array_back() {
		var cases = [
			[[[1,2,3]], 3],
			[[[-1, 1,2,3, 666]], 666],
		];
		return test_all_cases("Array(back)", &std::back(_), cases);
	}


	function array_index_clone() {
		var fx = lambda(array) {
			var arr = std::clone(array);
			var sum1 = 0;
			var sum2 = 0;
			for i (0, std::size(arr)) {
				sum1 += arr[i];
				arr[i] = 0;
				sum2 += arr[i];
			}
			return sum1 + sum2;
		};

		var cases = [
			[[[1,2,3]], 6],
			[[[80, -40, 2]], 42],
			[[[-1, -2, -3, 1, 2, 3, 666]], 666],
		];
		return test_all_cases("Array([], clone)", fx, cases);
	}


	function array_functions() {
		var insert1 = lambda {
			var array = std::array();
			std::insert_front(array, -1);
			std::insert_front(array, -2);
			std::insert_front(array, -3);
			std::insert_back(array, 1);
			std::insert_back(array, 2);
			std::insert_back(array, 3);
			std::insert(array, 3, 0);
			return array;
		};

		var remove1 = lambda {
			var array = [1,2,3,4,5,6,7];
			std::remove(array, 3);
			std::remove_back(array);
			std::remove_back(array);
			std::remove_front(array);
			std::remove_front(array);
			return array;
		};

		var push_pop = lambda {
			var array = [];
			std::push(array, 1);
			std::push(array, 2);
			std::push(array, 3);
			std::pop(array);
			return array;
		};
		
		var tests = [
			[insert1, [-3,-2,-1, 0, 1, 2, 3]],
			[remove1, [3,5]],
			[push_pop, [1,2]],
		];
		
		return test_functions("Array(insert, remove, push, pop)", tests);
	}


	function array_cast() {
		var cases = [
			[[1], [1]],
			[[[42]], [42]],
			[["Hello World"], ["Hello World"]],
			[[[]], []],
			[[std::cout()], [std::cout()]],
			[[std::cin()], [std::cin()]],
			[[null], [std::null_v()]],
			[['A'], ['A']],
			[[-3.5], [-3.5]],
		];
		return test_all_cases("Array(std::array)", &std::array(_), cases);
	}


	function array() {
		return
			array_size() +
			array_front() +
			array_back() +
			array_index_clone() +
			array_cast() +
			array_functions();
	}
}