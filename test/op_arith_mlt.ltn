namespace sphinx::test {
	function mlt_numeric() {
		assert_equal(true * true, 1);
		assert_equal(true * false, 0);
		assert_equal('A' * 2, 2 * 65);
		assert_equal(3 * 4, 12);
		assert_equal(-3 * 4, -12);
		assert_equal(-3 * -4, 12);
		assert_equal(3.5 * 2, 7);
		assert_equal(3.5 * -2, -7);
	}



	function mlt_numeric_type() {
		assert_equal(decltype(true * true).name, "int");
		assert_equal(decltype(true * 1).name, "int");
		assert_equal(decltype(1 * false).name, "int");
		assert_equal(decltype('A' * 'A').name, "int");
		assert_equal(decltype('A' * 2).name, "int");
		assert_equal(decltype(1 * 1).name, "int");
		assert_equal(decltype(1.0 * 1).name, "float");
		assert_equal(decltype(1 * 1.0).name, "float");
		assert_equal(decltype(1.0 * 1.0).name, "float");
	}



	function mlt_except() {
		assert_except(lambda => null * null);
		assert_success(lambda => 3 * 4);
		assert_success(lambda => 3.0 * 4);
		assert_success(lambda => 3.0 * true);
		assert_success(lambda => true * true);
		assert_except(lambda => [] * []);
		assert_except(lambda => "" * "");
		assert_except(lambda => std::map() * std::map());
		assert_except(lambda => std::stack() * std::stack());
		assert_except(lambda => std::queue() * std::queue());
	}
}