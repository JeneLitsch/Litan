namespace sphinx::test {
	function mlt_numeric() {
		assert_equal(true * true, 1);
		assert_equal(true * false, 0);
		assert_equal('A' * 2, 2 * 65);
		assert_equal(3 * 4, 12);
		assert_equal(-3 * 4, -12);
		assert_equal(-3 * -4, 12);
		assert_equal(3.5 * 2, 7);
		assert_equal(3.5 * -2, -7);
	}



	function mlt_numeric_type() {
		assert_equal(reflect(expr true * true).type.name, "int");
		assert_equal(reflect(expr true * 1).type.name, "int");
		assert_equal(reflect(expr 1 * false).type.name, "int");
		assert_equal(reflect(expr 'A' * 'A').type.name, "int");
		assert_equal(reflect(expr 'A' * 2).type.name, "int");
		assert_equal(reflect(expr 1 * 1).type.name, "int");
		assert_equal(reflect(expr 1.0 * 1).type.name, "float");
		assert_equal(reflect(expr 1 * 1.0).type.name, "float");
		assert_equal(reflect(expr 1.0 * 1.0).type.name, "float");
	}



	function mlt_except() {
		assert_except(lambda => null * null);
		assert_success(lambda => 3 * 4);
		assert_success(lambda => 3.0 * 4);
		assert_success(lambda => 3.0 * true);
		assert_success(lambda => true * true);
		assert_except(lambda => [] * []);
		assert_except(lambda => "" * "");
		assert_except(lambda => std::map() * std::map());
		assert_except(lambda => std::stack() * std::stack());
		assert_except(lambda => std::queue() * std::queue());
	}



	function mlt_string() {
		assert_equal_strict("XYZ" * true, "XYZ");
		assert_equal_strict(true * "XYZ", "XYZ");
		assert_equal_strict("XYZ" * false, "");
		assert_equal_strict(false * "XYZ", "");

		assert_equal_strict("ABC" * (4 : char), "ABCABCABCABC");
		assert_equal_strict((4 : char) * "XYZ", "XYZXYZXYZXYZ");
		
		assert_equal_strict("ABC" * 3, "ABCABCABC");
		assert_equal_strict(3 * "XYZ", "XYZXYZXYZ");
	}



	function mlt_string_type() {
		assert_equal_strict(reflect(expr "ABC" * 3).type.name, "string");
		assert_equal_strict(reflect(expr 3 * "XYZ").type.name, "string");
	}



	function mlt_array() {
		assert_equal_strict([1,2,3] * true, [1,2,3]);
		assert_equal_strict(true * [1,2,3], [1,2,3]);
		assert_equal_strict([1,2,3] * false, []);
		assert_equal_strict(false * [1,2,3], []);

		assert_equal_strict([1,2] * (4 : char), [1,2,1,2,1,2,1,2]);
		assert_equal_strict((4 : char) * [1,2], [1,2,1,2,1,2,1,2]);
		
		assert_equal_strict([1,2,3] * 3, [1,2,3,1,2,3,1,2,3]);
		assert_equal_strict(3 * [1,2,3], [1,2,3,1,2,3,1,2,3]);
	}



	function mlt_array_type() {
		assert_equal_strict(reflect(expr [1,2,3] * 3).type.name, "array<int>");
		assert_equal_strict(reflect(expr 3 * [1,2,3]).type.name, "array<int>");
	}
}