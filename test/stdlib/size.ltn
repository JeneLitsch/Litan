namespace stdlib {
	function size(sphinx) {
		var array = [0,1,2,3,4,5];

		var queue = std::queue();
		std::push(queue, 1);
		std::push(queue, true);
		std::push(queue, 42);
		std::push(queue, 42);
		std::pop(queue);

		var stack = std::stack();
		std::push(stack, 1);
		std::push(stack, true);
		std::push(stack, 42);
		std::push(stack, 42);
		std::pop(stack);

		var map = std::map();
		map["A"] = 4;
		map[4] = 4;

		var cases = [
			sphinx::assert_result([[1,2,3]], 3),
			sphinx::assert_result([[1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f',16]], 16),
			sphinx::assert_result([[1,2,3] + [4,5]], 5),
			sphinx::assert_result([std::array()], 0),
			sphinx::assert_result([std::array(42)], 1),
			sphinx::assert_result(["ABC"], 3),
			sphinx::assert_result([std::first_n([1,2,3,4], 3)], 3),
			sphinx::assert_result([lambda(a,b,c) {}], 3),
			sphinx::assert_result([std::queue()], 0),
			sphinx::assert_result([queue], 3),
			sphinx::assert_result([map], 2),
			sphinx::assert_result([stack], 3),
			sphinx::assert_result([std::stack()], 0),
			sphinx::assert_result([std::map()], 0),
			sphinx::assert_fail([1]),
			sphinx::assert_fail([2.0]),
			sphinx::assert_fail([null]),
			sphinx::assert_fail(['A']),
			sphinx::assert_fail([std::cout()]),
			sphinx::assert_fail([std::strout()]),
			sphinx::assert_fail([std::cin()]),
			sphinx::assert_fail([std::strin("")]),
			sphinx::assert_result([std::first_n(array, 3)], 3),
			sphinx::assert_result([std::first_n(array, 4)], 4),
			sphinx::assert_result([std::first_n(array, 0)], 0),
			sphinx::assert_result([std::last_n(array, 3)], 3),
			sphinx::assert_result([std::last_n(array, 4)], 4),
			sphinx::assert_result([std::last_n(array, 0)], 0),
			sphinx::assert_result([std::whole(array)], 6),
		];
		sphinx::run_test(sphinx, "std::size", &std::size(_), cases);
	}
}