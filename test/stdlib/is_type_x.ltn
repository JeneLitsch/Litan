namespace stdlib {
	function is_null(sphinx) {
		sphinx::run_test(sphinx, "std::is_null", &std::is_null(_), [
			sphinx::assert_true([null]),
			sphinx::assert_false([1,]),
			sphinx::assert_false([std::pair(1,2)]),
		]);
	}



	function is_bool(sphinx) {
		sphinx::run_test(sphinx, "std::is_bool", &std::is_bool(_), [
			sphinx::assert_true([true]),
			sphinx::assert_false([null]),
		]);
	}



	function is_int(sphinx) {
		sphinx::run_test(sphinx, "std::is_int", &std::is_int(_), [
			sphinx::assert_true([1]),
			sphinx::assert_false(['A']),
		]);
	}



	function is_float(sphinx) {
		sphinx::run_test(sphinx, "std::is_float", &std::is_float(_), [
			sphinx::assert_false([1]),
			sphinx::assert_true([1.0]),
		]);
	}



	function is_string(sphinx) {
		sphinx::run_test(sphinx, "std::is_string", &std::is_string(_), [
			sphinx::assert_true(["A"]),
			sphinx::assert_false([std::whole([])]),
		]);
	}



	function is_array(sphinx) {
		sphinx::run_test(sphinx, "std::is_array", &std::is_array(_), [
			sphinx::assert_false(["A"]),
			sphinx::assert_true([[]]),
			sphinx::assert_false([std::whole([])]),
		]);
	}



	function is_ostream(sphinx) {
		sphinx::run_test(sphinx, "std::is_ostream", &std::is_ostream(_), [
			sphinx::assert_true([std::cout()]),
			sphinx::assert_true([std::strout()]),
			sphinx::assert_false([std::strin("")]),
		]);	
	}



	function is_istream(sphinx) {
		sphinx::run_test(sphinx, "std::is_istream", &std::is_istream(_), [
			sphinx::assert_true([std::cin()]),
			sphinx::assert_true([std::strin("ABC")]),
		]);	
	}
	



	function is_type_x(sphinx) {
		sphinx::run_test(sphinx, "std::is_fxptr", &std::is_fxptr(_), [
			sphinx::assert_true([lambda => null]),
		]);	

		sphinx::run_test(sphinx, "std::is_external", &std::is_external(_), [
			sphinx::assert_true([std::external(0)]),
			sphinx::assert_false([lambda => null]),
		]);	

		sphinx::run_test(sphinx, "std::is_functional", &std::is_functional(_), [
			sphinx::assert_true([std::external(0)]),
			sphinx::assert_true([lambda => null]),
			sphinx::assert_true([lambda => null]),
		]);	

		sphinx::run_test(sphinx, "std::is_struct", &std::is_struct(_), [
			sphinx::assert_true([std::struct()]),
			sphinx::assert_true([std::pair(1,2)]),
		]);	

		sphinx::run_test(sphinx, "std::is_rng", &std::is_rng(_), [
			sphinx::assert_false([std::pair(1,2)]),
			sphinx::assert_true([std::random::mersenne()]),
		]);	

		sphinx::run_test(sphinx, "std::is_queue", &std::is_queue(_), [
			sphinx::assert_false([std::map()]),
			sphinx::assert_true([std::queue()]),
			sphinx::assert_false([std::cout()]),
		]);	

		sphinx::run_test(sphinx, "std::is_map", &std::is_map(_), [
			sphinx::assert_true([std::map()]),
			sphinx::assert_false([std::random::mersenne()]),
			sphinx::assert_true([std::map()]),
			sphinx::assert_false([std::stack()]),
		]);	

		sphinx::run_test(sphinx, "std::is_stack", &std::is_stack(_), [
			sphinx::assert_true([std::stack()]),
			sphinx::assert_false([""]),
		]);

		sphinx::run_test(sphinx, "std::is_range", &std::is_range(_), [
			sphinx::assert_true([std::whole([])]),
			sphinx::assert_false([[]]),
		]);

		sphinx::run_test(sphinx, "std::is_integral", &std::is_integral(_), [
			sphinx::assert_true([true ]),
			sphinx::assert_true(['A']),
			sphinx::assert_true([1]),
			sphinx::assert_false([1.5]),
			sphinx::assert_false([""]),
			sphinx::assert_false([std::external(0)]),
		]);

		sphinx::run_test(sphinx, "std::is_numeric", &std::is_numeric(_), [
			sphinx::assert_true([true]),
			sphinx::assert_true(['A']),
			sphinx::assert_true([1]),
			sphinx::assert_true([1.5]),
			sphinx::assert_false([null]),
			sphinx::assert_false([[]]),
		]);
	}
}