namespace stdlib {
	function is_type_x(sphinx) {
		var cases = [
			sphinx::assert_result([null,                    &std::is_null(_)],       true),
			sphinx::assert_result([1,                       &std::is_null(_)],       false),
			sphinx::assert_result([std::pair(1,2),          &std::is_null(_)],       false),
			sphinx::assert_result([true,                    &std::is_bool(_)],       true),
			sphinx::assert_result([null,                    &std::is_bool(_)],       false),
			sphinx::assert_result([1,                       &std::is_int(_)],        true),
			sphinx::assert_result(['A',                     &std::is_int(_)],        false),
			sphinx::assert_result([1,                       &std::is_float(_)],      false),
			sphinx::assert_result([1.0,                     &std::is_float(_)],      true),
			sphinx::assert_result(["A",                     &std::is_string(_)],     true),
			sphinx::assert_result([std::whole([]),          &std::is_string(_)],     false),
			sphinx::assert_result(["A",                     &std::is_array(_)],      false),
			sphinx::assert_result([[],                      &std::is_array(_)],      true),
			sphinx::assert_result([std::whole([]),          &std::is_array(_)],      false),
			sphinx::assert_result([std::cout(),             &std::is_ostream(_)],    true),
			sphinx::assert_result([std::strout(),           &std::is_ostream(_)],    true),
			sphinx::assert_result([std::strin(""),          &std::is_ostream(_)],    false),
			sphinx::assert_result([std::cin(),              &std::is_istream(_)],    true),
			sphinx::assert_result([std::strin("ABC"),       &std::is_istream(_)],    true),
			sphinx::assert_result([lambda => null,          &std::is_fxptr(_)],      true),
			sphinx::assert_result([std::external(0),        &std::is_external(_)],   true),
			sphinx::assert_result([lambda => null,          &std::is_external(_)],   false),
			sphinx::assert_result([std::external(0),        &std::is_functional(_)], true),
			sphinx::assert_result([lambda => null,          &std::is_functional(_)], true),
			sphinx::assert_result([lambda => null,          &std::is_functional(_)], true),
			sphinx::assert_result([std::struct(),           &std::is_struct(_)],     true),
			sphinx::assert_result([std::pair(1,2),          &std::is_struct(_)],     true),
			sphinx::assert_result([std::pair(1,2),          &std::is_rng(_)],        false),
			sphinx::assert_result([std::random::mersenne(), &std::is_rng(_)],        true),
			sphinx::assert_result([std::map(),              &std::is_queue(_)],      false),
			sphinx::assert_result([std::queue(),            &std::is_queue(_)],      true),
			sphinx::assert_result([std::cout(),             &std::is_queue(_)],      false),
			sphinx::assert_result([std::map(),              &std::is_map(_)],        true),
			sphinx::assert_result([std::random::mersenne(), &std::is_map(_)],        false),
			sphinx::assert_result([std::map(),              &std::is_map(_)],        true),
			sphinx::assert_result([std::stack(),            &std::is_map(_)],        false),
			sphinx::assert_result([std::stack(),            &std::is_stack(_)],      true),
			sphinx::assert_result(["",                      &std::is_stack(_)],      false),
			sphinx::assert_result([std::whole([]),          &std::is_range(_)],      true),
			sphinx::assert_result([[],                      &std::is_range(_)],      false),
			sphinx::assert_result([true,                    &std::is_integral(_)],   true),
			sphinx::assert_result(['A',                     &std::is_integral(_)],   true),
			sphinx::assert_result([1,                       &std::is_integral(_)],   true),
			sphinx::assert_result([1.5,                     &std::is_integral(_)],   false),
			sphinx::assert_result(["",                      &std::is_integral(_)],   false),
			sphinx::assert_result([std::external(0),        &std::is_integral(_)],   false),
			sphinx::assert_result([true,                    &std::is_numeric(_)],    true),
			sphinx::assert_result(['A',                     &std::is_numeric(_)],    true),
			sphinx::assert_result([1,                       &std::is_numeric(_)],    true),
			sphinx::assert_result([1.5,                     &std::is_numeric(_)],    true),
			sphinx::assert_result([null,                    &std::is_numeric(_)],    false),
			sphinx::assert_result([[],                      &std::is_numeric(_)],    false),
		];

		var fx = lambda (value, fx) => std::invoke(fx, [value]);

		sphinx::run_test(sphinx, "std::is_type*", fx, cases);	
	}
}