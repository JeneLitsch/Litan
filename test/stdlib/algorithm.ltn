namespace stdlib {
	function range_test(fx) {
		return lambda [fx] (range) {
			std::invoke(fx, [range]);
			return std::array(range);
		};
	}


	function sort_ascn(sphinx) {
		var fx = range_test(&std::sort_ascn(_));
		var cases = [
			sphinx::assert_result([[3, 2, 1]], [1, 2, 3]),
			sphinx::assert_result([std::first_n([3, 2, 1],2)], [2, 3, 1]),
			sphinx::assert_result([std::last_n([3, 2, 1],2)], [3, 1, 2]),
			sphinx::assert_result([std::whole([3, 2, 1])], [1, 2, 3]),
			sphinx::assert_result([['C', 'A', 'B']], ['A', 'B', 'C']),
			sphinx::assert_result([[]], []),
		];
		sphinx::run_test(sphinx, "std::sort_ascn", fx, cases);
	}


	function sort_desc(sphinx) {
		var fx = range_test(&std::sort_desc(_));
		var cases = [
			sphinx::assert_result([[1, 2, 3]], [3, 2, 1]),
			sphinx::assert_result([std::first_n([1, 2, 3],2)], [2, 1, 3]),
			sphinx::assert_result([std::last_n([1, 2, 3],2)], [1, 3, 2]),
			sphinx::assert_result([std::whole([1, 2, 3])], [3, 2, 1]),
			sphinx::assert_result([['A', 'B', 'C']], ['C', 'B', 'A']),
			sphinx::assert_result([[]], []),
		];
		sphinx::run_test(sphinx, "std::sort_desc", fx, cases);
	}


	function reverse(sphinx) {
		var fx = range_test(&std::reverse(_));
		var cases = [
			sphinx::assert_result([[1, 2, 3]], [3, 2, 1]),
			sphinx::assert_result([[]], []),
			sphinx::assert_result([[42, 1337]], [1337, 42]),
		];
		sphinx::run_test(sphinx, "std::reverse", fx, cases);
	}



	function is_sorted_desc(sphinx) {
		var cases = [
			sphinx::assert_result([[1, 2, 3]], false),
			sphinx::assert_result([[3, 2, 1]], true),
			sphinx::assert_result([[1, 3, 1, 4]], false),
			sphinx::assert_result([[42, 1337]], false),
			sphinx::assert_result([[1337, 42]], true),
		];
		sphinx::run_test(sphinx, "std::is_sorted_desc", &std::is_sorted_desc(_), cases);
	}


	function is_sorted_ascn(sphinx) {
		var cases = [
			sphinx::assert_result([[1, 2, 3]], true),
			sphinx::assert_result([[3, 2, 1]], false),
			sphinx::assert_result([[1, 3, 1, 4]], false),
			sphinx::assert_result([[42, 1337]], true),
			sphinx::assert_result([[1337, 42]], false),
		];
		sphinx::run_test(sphinx, "std::is_sorted_ascn", &std::is_sorted_ascn(_), cases);
	}

	function find(sphinx) {
		var cases = [
			sphinx::assert_result([[1, 2, 3], 1], 0), 
			sphinx::assert_result([[1, 2, 3], 2], 1), 
			sphinx::assert_result([[1, 2, 3], 3], 2), 
			sphinx::assert_result([[1, 2, 3], 42], -1), 
			sphinx::assert_result([[1, 2, 3], -1337], -1), 
		];
		sphinx::run_test(sphinx, "std::find", &std::find(_,_), cases);
	}

	function copy_front(sphinx) {
		var fx = lambda(a, b) {
			var c = std::clone(a);
			std::copy_front(b, c);
			return c;
		}; 
		var cases = [
			sphinx::assert_result([[1,2,3], [4, 5, 6]], [4,5,6,1,2,3]),
		];
		sphinx::run_test(sphinx, "std::copy_front", fx, cases);
	}

	function copy_back(sphinx) {
		var fx = lambda(a, b) {
			var c = std::clone(a);
			std::copy_back(b, c);
			return c;
		};
		var cases = [
			sphinx::assert_result([[1,2,3], [4, 5, 6]], [1,2,3,4,5,6]),
		];
		sphinx::run_test(sphinx, "std::copy_back", fx, cases);
	}

	function fill(sphinx) {
		var fx = lambda(arr, val) {
			var a = std::clone(arr);
			std::fill(a, val);
			return a;
		};
		var cases = [
			sphinx::assert_result([[1,2,3], 42], [42,42,42]),
			sphinx::assert_result([[1,2,3,4], 42], [42,42,42,42]),
			sphinx::assert_result([[], 42], []),
		];
		sphinx::run_test(sphinx, "std::fill", fx, cases);
	}
}
