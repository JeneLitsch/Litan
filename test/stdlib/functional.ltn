namespace stdlib {
	function make_capture_lambda(a) {
		return lambda [a] () {
			return a;
		};
	}

	function make_capture_lambda(a, b) {
		return lambda [a, b] () {
			return a + b;
		};
	}

	function make_capture_lambda() {
		var a = 1;
		var b = 2;
		return lambda [a, b] (c, d) {
			return a - b + c - d;
		};
	}





	function captures(sphinx) {
		var cases = [
			sphinx::assert_result([make_capture_lambda(1) , []], 1),
			sphinx::assert_result([make_capture_lambda(42), []], 42),
			sphinx::assert_result([make_capture_lambda(21, 21), []], 42),
			sphinx::assert_result([make_capture_lambda(1000, 337), []], 1337),
			sphinx::assert_result([make_capture_lambda(), [3, 4]], -2),
			sphinx::assert_result([make_capture_lambda(), [3, 1]], 1),
		];

		sphinx::run_test(sphinx, "Lambda capture", &std::invoke(_,_), cases);
	}


	
	function invoke_0(sphinx) {
		var cases = [
			sphinx::assert_result([lambda => 42], 42),
		];
		sphinx::run_test(sphinx, "std::invoke_0", &std::invoke_0(_), cases);
	}



	function invoke_1(sphinx) {
		var cases = [
			sphinx::assert_result([&std::abs(_), -3], 3),
			sphinx::assert_result([&std::abs(_), 3], 3),
		];
		sphinx::run_test(sphinx, "std::invoke_1", &std::invoke_1(_,_), cases);
	}



	function invoke_2(sphinx) {
		var cases = [
			sphinx::assert_result([&std::min(_,_), 3, 4], 3),
			sphinx::assert_result([&std::max(_,_), 3, 4], 4),
			sphinx::assert_result([&std::pow(_,_), 2, 8], 256),
		];
		sphinx::run_test(sphinx, "std::invoke_2", &std::invoke_2(_,_,_), cases);
	}



	function invoke_3(sphinx) {
		var cases = [
			sphinx::assert_result([&std::clamp(_,_,_), 5, 1, 10], 5),
			sphinx::assert_result([&std::clamp(_,_,_), 11, 1, 10], 10),
			sphinx::assert_result([&std::clamp(_,_,_), -11, 1, 10], 1),
		];
		sphinx::run_test(sphinx, "std::invoke_3", &std::invoke_3(_,_,_,_), cases);
	}
}