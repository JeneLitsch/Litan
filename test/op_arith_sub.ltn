namespace sphinx::test {
	function sub_numeric() {
		assert_equal(true - true, 0);
		assert_equal('B' - 1, 'A');
		assert_equal('B' - 'B', 0);
		assert_equal(3 - 4, -1);
		assert_equal(3 - 0.5, 2.5);
	}



	function sub_numeric_type() {
		assert_equal(reflect(expr false - true).type.name, "int");
		assert_equal(reflect(expr 'A' - 'B').type.name, "int");
		assert_equal(reflect(expr 'A' - 1).type.name, "int");
		assert_equal(reflect(expr 3 - 4).type.name, "int");
		assert_equal(reflect(expr 3 - 4.0).type.name, "float");
	}



	function sub_except() {
		assert_success(lambda => (true:any) - (true:any));
		assert_success(lambda => ('A':any) - ('A':any));
		assert_success(lambda => (3:any) - (4:any));
		assert_except(lambda => (3.0:any) - ("":any));
		assert_except(lambda => ("":any) - ("":any));
		assert_except(lambda => ([]:any) - ([]:any));
		assert_except(lambda => (std::map():any) - (std::map():any));
		assert_except(lambda => (std::struct():any) - (std::struct():any));
		assert_except(lambda => (std::queue():any) - (std::queue():any));
		assert_except(lambda => (std::stack():any) - (std::stack():any));
	}
}