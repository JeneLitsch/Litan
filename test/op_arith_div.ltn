namespace sphinx::test {
	function div_numeric() {
		assert_equal(true / 1, 1);
		assert_equal('A' / 2, 32);
		assert_equal('A' / 2.0, 32.5);
		assert_equal(4 / 2, 2);
		assert_equal(-4 / 2, -2);
		assert_equal(-4 / -2, 2);
		assert_equal(-4.0 / -2.0, 2.0);
	}



	function div_numeric_type() {
		assert_equal(reflect(expr true / 1).type.name, "int");
		assert_equal(reflect(expr 'A' / 2).type.name, "int");
		assert_equal(reflect(expr 'A' / 2.0).type.name, "float");
		assert_equal(reflect(expr 4 / 2).type.name, "int");
		assert_equal(reflect(expr -4 / 2).type.name, "int");
		assert_equal(reflect(expr -4 / -2).type.name, "int");
		assert_equal(reflect(expr -4.0 / -2.0).type.name, "float");
	}



	function div_except() {
		assert_success(lambda => (1:any) / (2:any));
		assert_success(lambda => (1.0:any) / (2:any));
		assert_except(lambda => (1.0:any) / (0:any));
		assert_except(lambda => ("":any) / ("":any));
		assert_except(lambda => ([]:any) / ([]:any));
		assert_except(lambda => (std::map():any) / (std::map():any));
		assert_except(lambda => (std::struct():any) / (std::struct():any));
		assert_except(lambda => (std::queue():any) / (std::queue():any));
		assert_except(lambda => (std::stack():any) / (std::stack():any));
		assert_except(lambda => (std::struct():any) / (std::struct():any));
	}
}