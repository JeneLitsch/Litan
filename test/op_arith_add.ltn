namespace sphinx::test {
	function add_numeric() {
		assert_equal(true + true, 2);
		assert_equal('A' + 'A', 65 + 65);
		assert_equal(21 + 21, 42);
		assert_equal(21 + 21.0, 42.0);
		assert_equal(-21 + 21, 0);
		assert_equal(-21 + -21, -42);
		assert_equal(20.5 + 21.5, 42.0);
		assert_equal(-20.5 + -21.5, -42.0);
	}



	function add_numeric_typename() {
		assert_equal(std::typename(true + true), "int");
		assert_equal(std::typename(true + 1),    "int");
		assert_equal(std::typename('A' + 'A'),   "int");
		assert_equal(std::typename(21 + 21),     "int");
		assert_equal(std::typename(21 + 21.0),   "float");
		assert_equal(std::typename(20.5 + 21.5), "float");
	}



	function add_string() {
		assert_equal("Hello " + "World", "Hello World");
		assert_equal("" + "", "");
	}



	function add_array() {
		assert_equal([] + [], []);
		assert_equal([] + [1], [1]);
		assert_equal([1] + [], [1]);
		assert_equal([1] + [1], [1, 1]);
		assert_equal([[1]] + [2], [[1], 2]);
		assert_equal([[""]] + [2], [[""], 2]);
		assert_equal([[""]] + [[2]], [[""], [2]]);
	}


	function add_except() {
		assert_except(lambda => ("") + ([]));
		assert_success(lambda => ([]) + ([]));
		assert_except(lambda => (1) + ([]));
		assert_success(lambda => (1) + (2));
		assert_except(lambda => (std::cout()) + (std::cout()));
		assert_except(lambda => (std::struct()) + (std::struct()));
		assert_except(lambda => (std::map()) + (std::map()));
		assert_except(lambda => ("") + (1));
	}
}