namespace sphinx::test {
	function neg_numeric() {
		assert_equal(-true, 0-1);
		assert_equal(-0, 0);
		assert_equal(-4, 0 - 4);
		assert_equal(--4, 4);
		assert_equal(-4.0, 0 - 4.0);
		assert_equal(--4.0, 4.0);
	}



	function neg_numeric_type() {
		assert_equal(reflect(expr -true).type.name, "int");
		assert_equal(reflect(expr -'A').type.name, "int");
		assert_equal(reflect(expr -3).type.name, "int");
		assert_equal(reflect(expr -3.0).type.name, "float");
	}



	function neg_numeric_typename() {
		assert_equal(std::typename(-true), "int");
		assert_equal(std::typename(-'A'), "int");
		assert_equal(std::typename(-3), "int");
		assert_equal(std::typename(-3.0), "float");
	}



	function neg_except() {
		assert_except(lambda =>  -(null:any));
		assert_success(lambda => -(true:any));
		assert_success(lambda => -('A':any));
		assert_success(lambda => -(1:any));
		assert_success(lambda => -(1.0:any));
		assert_except(lambda =>  -("":any));
		assert_except(lambda =>  -(std::map():any));
		assert_except(lambda =>  -(std::struct():any));
		assert_except(lambda =>  -(std::stack():any));
		assert_except(lambda =>  -(std::queue():any));
		assert_except(lambda =>  -(std::cout():any));
	}
}