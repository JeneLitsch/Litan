function test_single_case(fx, params, expected) {
	var r = std::invoke(fx, params);
	var correct = (r == expected);
	std::io::reset_color();
	if(correct) {
		std::io::set_fg_color(std::io::color::GREEN);
		std::print("ok: ");
	}
	else {
		std::io::set_fg_color(std::io::color::BOLD_RED);
		std::print("[ERROR] ");
	}
	std::print(std::string(params) + " -> " + std::string(expected));
	if(!correct) { 
		std::print(" got " + std::string(r));
	}
	std::io::reset_color();
	std::println("");
	return std::int(!correct);
}

function test_all_cases(name, fx, cases) {
	std::println("Testing: \"" + name + "\" with " + std::string(std::size(cases)) + " cases ...");
	var errors = 0;
	for (i : 0 -> std::size(cases)) {
		var test_case = cases[i];
		var params = test_case[0];
		var expected = test_case[1];
		errors += test_single_case(fx, params, expected);
	}
	std::println("");
	return errors;
}

function test_functions(name, tests) {
	std::println("Testing: \"" + name + "\"");
	var errors = 0;
	for (i : 0 -> std::size(tests)) {
		var test = tests[i];
		var fx = test[0];
		var expected = test[1];
		errors += test_single_case(fx, [], expected);
	}
	std::println("");
	return errors;
}

function run_tests(tests) {
	std::println("=== Running unit tests ===");
	var errors = 0;
	for (i : 0 -> std::size(tests)) {
		errors += std::invoke(tests[i]);
	}
	return errors;
}

function interprete_result(errors) {
	std::println("=== Result ===");
	if(errors) {
		std::println("Test failed");
		std::println(std::string(errors) + " ERROR(S)");
	}
	else {
		std::println("No errors found. Test successful :)");
	}
	std::println("");
}