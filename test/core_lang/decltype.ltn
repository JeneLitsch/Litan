function type_check(decl, result) {
	return sphinx::assert_result([result], decl.name);
}
namespace core {

	function fx_returns_int() -> int => 1

    function decltype_name(sphinx) {
		var a : int = 1;
		var b : array<int> = a;
		var c : map<int, array<int>> = a;
		var d : map<int, array<array<int>>> = a;
		var e = a;

		var cases = [
			type_check(decltype(a), "int"),
			type_check(decltype(b), "array<int>"),
			type_check(decltype(c), "map<int, array<int>>"),
			type_check(decltype(d), "map<int, array<array<int>>>"),
			type_check(decltype(e), "any"),
			

			type_check(decltype(null), "null"),
			type_check(decltype(true), "bool"),
			type_check(
				decltype(false),
				"bool"),

			type_check(
				decltype('a'),
				"char"
			),

			type_check(
				decltype(1),
				"int"
			),

			type_check(
				decltype(1.0),
				"float"
			),

			type_check(
				decltype("abc"),
				"string"),

			type_check(
				decltype([]),
				"array<>"
			),

			type_check(
				decltype([1]),
				"array<int>"
			),

			type_check(
				decltype([2.0]),
				"array<float>"
			),

			type_check(
				decltype(['a', "b"]),
				"array<any>"
			),

			type_check(
				decltype(["xyz"]),
				"array<string>"
			),

			type_check(
				decltype([1, 2.0]),
				"array<any>"
			),

			type_check(
				decltype([[1], [2.0]]),
				"array<array<any>>"
			),

			type_check(
				decltype([[[false]], [[true]]]),
				"array<array<array<bool>>>"
			),

			type_check(
				decltype([[[false]], [[true]], [[1]]]),
				"array<array<array<any>>>"
			),

			type_check(
				decltype(-(1)),
				"int"
			),
			
			type_check(
				decltype(-(1.0)),
				"float"
			),

			type_check(
				decltype(-(true)),
				"int"
			),

			type_check(
				decltype(-('a')),
				"int"
			),

			type_check(
				decltype(-("String")),
				"error"
			),
		];

		sphinx::run_test(sphinx, "decltype.name", lambda(x) => x, cases); 
    }
}