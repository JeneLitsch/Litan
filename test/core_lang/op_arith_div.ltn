namespace op {
	function div_value(sphinx) {
		var cases = [
			sphinx::assert_result([1, 2], 0),
			sphinx::assert_result([1, 2.0], 0.5),
			sphinx::assert_result([true, 2], 0),
			sphinx::assert_result([true, 2.0], 0.5),
			sphinx::assert_fail([1, 0]),
			sphinx::assert_fail([null, null]),
			sphinx::assert_fail([std::cout(), std::cout()]),
			sphinx::assert_fail([std::cout(), std::queue()]),
			sphinx::assert_fail([std::cin(), std::chrono::clock()]),
			sphinx::assert_fail([std::struct(), lambda{}]),
		];
		
		var fx    = lambda(a, b) => a / b;

		sphinx::run_test(sphinx, "Operator /", fx, cases);
	}



	function div_type(sphinx) {
		var cases = [
			type_check(decltype(1 / 2.0), "float"),
			type_check(decltype(1 / 1), "int"),
			type_check(decltype(true / 1), "int"),
			type_check(decltype(true / true), "int"),
			type_check(decltype(1.0 / 1.0), "float"),
			type_check(decltype("A" / "A"), "error"),
		];

		sphinx::run_test(sphinx, "Operator / type", lambda(x) => x, cases);
	}



	function div(sphinx) {
		div_value(sphinx);
	}
}