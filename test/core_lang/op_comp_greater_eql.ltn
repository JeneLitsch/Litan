namespace op {
    function greater_eql_value(sphinx) {
        var cases = [
			sphinx::assert_result([true, true], true),
			sphinx::assert_result([true, false], true),
			sphinx::assert_result(['A', 'A'], true),
			sphinx::assert_result(['Z', 'Z'], true),
			sphinx::assert_result([1, 2], false),
			sphinx::assert_result([42, -2.0], true),
			sphinx::assert_result([-42, -2.0], false),
			sphinx::assert_result(['A', 'C'], false),
			sphinx::assert_result(['Z', 'Y'], true),
			sphinx::assert_result(["ABC", "AB"], true),
			sphinx::assert_result(["ABC", "BC"], false),
			sphinx::assert_result(["ABCD", "ZBC"], false),
			sphinx::assert_result(["ZBCD", "AZBC"], true),
			sphinx::assert_result([std::cout(), std::cout()], true),
			sphinx::assert_result([std::cin(), std::cout()], false),
		];

		var fx = lambda (a, b) => a >= b;

		sphinx::run_test(sphinx, "Operator >=", fx, cases);
    }



    function greater_eql_type(sphinx) {
		var cases = [
			type_check(decltype(1 >= "0"), "bool"),
		];

		sphinx::run_test(sphinx, "Operator >= type", lambda(x) => x, cases);
	}



    function greater_eql(sphinx) {
		greater_eql_type(sphinx);
		greater_eql_value(sphinx);
	}
}