namespace op {
    function space_ship_value(sphinx) {
        var cases = [
			sphinx::assert_result([-1, 1], -1),
			sphinx::assert_result([1, 1], 0),
			sphinx::assert_result([1, -1], 1),
			sphinx::assert_result(['A', 'A'], 0),
			sphinx::assert_result(['A', 'Z'], -1),
			sphinx::assert_result(['Z', 'A'], 1),
			sphinx::assert_result(["A", "B"], -1),
			sphinx::assert_result(["C", "B"], 1),
			sphinx::assert_result(["a", "A"], 1),
			sphinx::assert_result(["zzz", "zzz"], 0),
			sphinx::assert_result([[1,2,3], [1,2,3]], 0),
			sphinx::assert_result([[1,2], [1,2,3]], -1),
			sphinx::assert_result([[1,2,4], [1,2,3]], 1),
		];

		var fx = lambda (a, b) => a <=> b;

		sphinx::run_test(sphinx, "Space ship <=>", fx, cases);
    }

    
	
	function space_ship_type(sphinx) {
		var cases = [
			type_check(decltype(0.1 <=> 1.1), "int"),
			type_check(decltype(1 <=> 1), "int"),
			type_check(decltype(1 <=> "0"), "int"),
		];

		sphinx::run_test(sphinx, "Operator <=> type", lambda(x) => x, cases);
	}


    
	function space_ship(sphinx) {
		space_ship_value(sphinx);
		space_ship_type(sphinx);
	}
}