namespace op {
	function index_value(sphinx) {
		var array = [0,1,2,3,4,5];
		
		var map = std::map();
		std::println("XXX");
		map[1] = "A";
		map[2] = "B";
		map[-1] = 42;
		
		var fx = lambda(range, index) {
			return range[index];
		};
		var cases = [
			sphinx::assert_result(["ABC", 2], 'C'),
			sphinx::assert_result([map, 1], "A"),
			sphinx::assert_result([map, 2], "B"),
			sphinx::assert_result([map, 13], null),
			sphinx::assert_result([map, -1], 42),
			sphinx::assert_fail([true, 1]),
			sphinx::assert_fail([true, 1]),
			sphinx::assert_fail(["ABC", 5]),
			sphinx::assert_fail(["ABC", -1]),
			sphinx::assert_fail(["ABC", -1]),
		];
		sphinx::run_test(sphinx, "Operator [] value", fx, cases);
	}


	function index_type(sphinx) {
		var cases = [

			type_check(
				decltype([1,2,3][1]),
				"int"
			),

			type_check(
				decltype(["a","a","a"][1]),
				"string"
			),

			type_check(
				decltype(["a","a","a"][[1,2,3][1]]),
				"string"
			),

			type_check(
				decltype([0.0,"a","a"][[1,2,3][1]]),
				"any"
			),

			type_check(
				decltype([["a"],["a"],["a"]][1]),
				"array<string>"
			),

			type_check(
				decltype(std::map()[0]),
				"any"
			),
		];
		sphinx::run_test(sphinx, "Operator [] decltype", lambda(x) => x, cases); 
	}


	function index(sphinx) {
		index_value(sphinx);
		index_type(sphinx);
	}
}