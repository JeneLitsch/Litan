namespace op {
	function pow_value(sphinx) {
		var cases = [
			sphinx::assert_result([2, 2], 4),
			sphinx::assert_result([3, 3], 27),
			sphinx::assert_result([9.0, 0.5], 3),
			sphinx::assert_result([1337, 0], 1),
			sphinx::assert_result([1337, 1], 1337),
			sphinx::assert_result([2, -1], 0.5),
			sphinx::assert_fail(["a", 0]),
			sphinx::assert_fail([[], 0]),
			sphinx::assert_fail([std::queue(), 0]),
			sphinx::assert_result([true, 0], true),
			sphinx::assert_result([true, 1], true),
			sphinx::assert_result([true, 2], true),
			sphinx::assert_result([0, 0], 1),
		];
		
		var fx    = lambda (a, b) => a ** b;

		sphinx::run_test(sphinx, "Operator **", fx, cases);
	}



	function pow_type(sphinx) {
		var cases = [
			type_check(decltype(1 ** 2.0), "float"),
			type_check(decltype(1 ** 1), "float"),
			type_check(decltype(true ** 1), "float"	),
			type_check(decltype(true ** true), "float"),
			type_check(decltype(1.0 ** 1.0), "float"),
			type_check(decltype("A" ** "A"), "error"),
			type_check(decltype([] ** []), "error"),
		];

		sphinx::run_test(sphinx, "Operator ** type", lambda(x) => x, cases);
	}



	function pow(sphinx) {
		pow_value(sphinx);
		pow_type(sphinx);
	}
}