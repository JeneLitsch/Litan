namespace op {
	function mod_value(sphinx) {
		var cases = [
			sphinx::assert_result([5, 2], 1),
			sphinx::assert_result([1.5, 1.0], 0.5),
			sphinx::assert_result([-3.5, 7.0], -3.5),
			sphinx::assert_result([-24.0, -7.0], -3),
			sphinx::assert_result([-24, -7], -3),
			sphinx::assert_result([-24, 1], 0),
			sphinx::assert_result([-24, 25], -24),
			sphinx::assert_result([-24, 23], -1),
			sphinx::assert_fail([1, 0]),
			sphinx::assert_fail(["A", "C"]),
			sphinx::assert_fail([true, false]),
		];
		
		var fx    = lambda (a, b) => a % b;
		var fx_eq = lambda (a, b) {
			a %= b;
			return a;
		};

		sphinx::run_test(sphinx, "Operator %", fx, cases);
		sphinx::run_test(sphinx, "Operator %=", fx_eq, cases);
	}



	function mod_type(sphinx) {
		var cases = [
			type_check(decltype(1 % 2.0), "float"),
			type_check(decltype(1 % 1), "int"),
			type_check(decltype(true % 1), "int"),
			type_check(decltype(true % true), "int"),
			type_check(decltype(1.0 % 1.0), "float"),
			type_check(decltype("A" % "A"), "error"),
			type_check(decltype([] % []), "error"),
		];

		sphinx::run_test(sphinx, "Operator % type", lambda(x) => x, cases);
	}



	function mod(sphinx) {
		mod_value(sphinx);
		mod_type(sphinx);
	}
}