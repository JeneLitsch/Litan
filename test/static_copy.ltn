namespace sphinx::test {
	function static_copy_bool() {
		assert_equal(std::str(static_copy<bool>(1)), "true");
		assert_equal(std::str(static_copy<bool>(0)), "false");
		assert_equal(std::str(static_copy<bool>(100)), "true");
		assert_equal(std::str(static_copy<bool>(-1)), "true");
		assert_equal(std::str(static_copy<bool>(null)), "false");
		assert_equal(std::str(static_copy<bool>("")), "true");
		assert_equal(std::str(static_copy<bool>('A')), "true");
		assert_equal(std::str(static_copy<bool>([])), "true");
	}

	
	
	function static_copy_array() {
		assert_equal(static_copy<array<int>>([1.5, 2.5, 3.5]), [1,2,3]);
		assert_equal(static_copy<array<int>>("ABC"), [65, 66, 67]);
		assert_equal(static_copy<array<bool>>([0.0, 1.5, 0.1]), [false,true,true]);
	}



	function static_copy_array_copy() {
		var a : array<array<int>> = [[1,2,3], [4,5,6]];
		var b : auto = static_copy<array<array<float>>>(a);
		var c : auto = static_copy<array<array<int>>>(a);

		b[0][0] = 42;
		c[0][0] = 1337;

		assert_equal(a, [[1,2,3], [4,5,6]]);
		assert_equal(b, [[42,2,3], [4,5,6]]);
		assert_equal(c, [[1337,2,3], [4,5,6]]);
	}



	function static_copy_string() {
		assert_equal(static_copy<string>(['A', 'B', 'C']), "ABC");
		assert_equal(static_copy<string>([65, 66, 67]), "ABC");
		assert_equal(static_copy<string>([65.0, 66.0, 67.0]), "ABC");
	}



	function static_copy_string_copy() {
		var str : auto = "ABC";
		var x : auto = static_copy<string>(str);
		var y : auto = static_copy<string>(str);
		var z : auto = static_copy<string>(str);

		x[0] = 'X';
		y[0] = 'Y';
		z[0] = 'Z';

		assert_equal(str, "ABC");
		assert_equal(x, "XBC");
		assert_equal(y, "YBC");
		assert_equal(z, "ZBC");
	}



	function static_copy_type() {
		assert_equal(decltype(static_copy<bool>(0)).name,        "bool");
		assert_equal(decltype(static_copy<char>(0)).name,        "char");
		assert_equal(decltype(static_copy<int>(0)).name,         "int");
		assert_equal(decltype(static_copy<float>(0)).name,       "float");
		assert_equal(decltype(static_copy<string>("")).name,     "string");
		assert_equal(decltype(static_copy<array<int>>("")).name, "array<int>");
	}
}