namespace test {
	function if_else() {
		var fx = lambda (condition, a, b) {
			if(condition) {
				return a;
			}
			else return b;
		};

		var cases = [
			[[true, 1, 2], 1], 
			[[false, 1, 2], 2], 
			[[null, 1, 2], 2], 
			[[1, 1, 2], 1], 
		];

		return test_all_cases("if else", fx, cases);
	}


	function ternary() {
		var fx = lambda (condition, a, b) {
			return condition ? a : b;
		};
		var cases = [
			[[true, 1, 2],  1],
			[[false, 1, 2], 2],
			[[-1, 1, 2],    1],
			[[null, 1, 2],  2],
			[["", 1, 2],    1],
			[[[], 1, 2],    1],
			[[0, 1, 2],     2],
		];
		return test_all_cases("Ternary c ? a : b", fx, cases);
 	}
	

	function elvis() {
		var fx = lambda (a, b) {
			return a ?: b;
		};
		var cases = [
			[[true, 1],     true],
			[[false, 1],    1],
			[[-1, 1],       -1],
			[[null, 1],     1],
			[["", 1],       ""],
			[[[], 1],       []],
			[[42, 1337],    42],
			[[0, 1337],     1337],
		];
		return test_all_cases("Elvis a ?: b", fx, cases);
	}


	function nullco() {
		var fx = lambda(a, b) {
			return a??b;
		};
		var cases = [
			[[true, 1],            true],
			[[false, 1],           false],
			[[null, 42],           42],
			[[std::cout(), 42],    std::cout()],
			[["Hello", 42],        "Hello"],
			[[-15.0, 42],          -15.0],
			[[std::null_v(), 3.5], 3.5],
		];
		return test_all_cases("Null coalescing operator ??", fx, cases);
	}


	function conditional() {
		return
			if_else() +
			ternary() +
			elvis() +
			nullco();
	}
}