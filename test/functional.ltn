namespace test {
	function make_capture_lambda(a) {
		return lambda [a] () {
			return a;
		};
	}

	function make_capture_lambda(a, b) {
		return lambda [a, b] () {
			return a + b;
		};
	}

	function make_capture_lambda() {
		var a = 1;
		var b = 2;
		return lambda [a, b] (c, d) {
			return a - b + c - d;
		};
	}

	function test_iife(p1) {
		var x = 2;
		var y = -1 * iife {
			var a = --iife{
				return iife {
					var foo = p1;
					return foo;
				} * x;
			} * iife { return 1; };
			return a;
		};
		return iife {
			return y;
		};
	}

	function iifes() {
		var cases = [
			[[-21],  42],
			[[1],    -2],
			[[1337], -2674],
			[[4],    -8],
		];
		return test_all_cases("iife{...}", &test_iife(_), cases);
	}

	function captures() {
		var cases = [
			[[make_capture_lambda(1) , []], 1],
			[[make_capture_lambda(42), []], 42],
			[[make_capture_lambda(21, 21), []], 42],
			[[make_capture_lambda(1000, 337), []], 1337],
			[[make_capture_lambda(), [3, 4]], -2],
			[[make_capture_lambda(), [3, 1]], 1],
		];

		return test_all_cases("Lambda capture", &std::invoke(_,_), cases);
	}


	
	function invoke_0() {
		var cases = [
			[[lambda => 42], 42],
		];
		return test_all_cases("std::invoke_0", &std::invoke_0(_), cases);
	}



	function invoke_1() {
		var cases = [
			[[&std::abs(_), -3], 3],
			[[&std::abs(_), 3], 3],
		];
		return test_all_cases("std::invoke_1", &std::invoke_1(_,_), cases);
	}



	function invoke_2() {
		var cases = [
			[[&std::min(_,_), 3, 4], 3],
			[[&std::max(_,_), 3, 4], 4],
			[[&std::pow(_,_), 2, 8], 256],
		];
		return test_all_cases("std::invoke_2", &std::invoke_2(_,_,_), cases);
	}



	function invoke_3() {
		var cases = [
			[[&std::clamp(_,_,_), 5, 1, 10], 5],
			[[&std::clamp(_,_,_), 11, 1, 10], 10],
			[[&std::clamp(_,_,_), -11, 1, 10], 1],
		];
		return test_all_cases("std::invoke_3", &std::invoke_3(_,_,_,_), cases);
	}



	function functional() {
		return captures() + iifes() + invoke_0() + invoke_1() + invoke_2() + invoke_3();
	}
}