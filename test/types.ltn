namespace test {
	function type_switch() {
		var cases = [
			[[null],                    "null"],
			[[true],                    "bool"],
			[[false],                   "bool"],
			[['A'],                     "char"],
			[[1],                       "int"],
			[[3.14],                    "float"],
			[[[4,2]],                   "array"],
			[["ABC"],                   "string"],
			[[std::cin()],              "istream"],
			[[std::cout()],             "ostream"],
			[[lambda => 0],             "fxptr"],
			[[std::external(0)],        "external"],
			[[std::chrono::clock()],    "clock"],
			[[std::struct()],           "struct"],
			[[std::whole([])],          "range"],
			[[std::queue()],            "queue"],
			[[std::stack()],            "stack"],
			[[std::map()],              "map"],
			[[std::random::mersenne()], "rng"],
		];

		return test_all_cases("type_switch", &std::typename(_), cases);
	}



	function is_type() {
		var cases_1 = [
			[[null,        std::type::nul],     true],
			[[true,        std::type::bool],    true],
			[[null,        std::type::bool],    false],
			[[1,           std::type::int],     true],
			[[1,           std::type::float],   false],
			[["A",         std::type::string],  true],
			[["A",         std::type::array],   false],
			[[[],          std::type::array],   true],
			[[std::map(),  std::type::map],     true],
			[[std::map(),  std::type::queue],   false],
			[[std::cout(), std::type::ostream], true],
		];


		var cases_2 = [
			[[null,                    &std::is_null(_)],       true],
			[[1,                       &std::is_null(_)],       false],
			[[std::pair(1,2),          &std::is_null(_)],       false],

			[[true,                    &std::is_bool(_)],       true],
			[[null,                    &std::is_bool(_)],       false],

			[[1,                       &std::is_int(_)],        true],
			[['A',                     &std::is_int(_)],        false],

			[[1,                       &std::is_float(_)],      false],
			[[1.0,                     &std::is_float(_)],      true],

			[["A",                     &std::is_string(_)],     true],
			[[std::whole([]),          &std::is_string(_)],     false],
			
			[["A",                     &std::is_array(_)],      false],
			[[[],                      &std::is_array(_)],      true],
			[[std::whole([]),          &std::is_array(_)],      false],
			
			[[std::cout(),             &std::is_ostream(_)],    true],
			[[std::strout(),           &std::is_ostream(_)],    true],
			[[std::strin(""),          &std::is_ostream(_)],    false],
			
			[[std::cin(),              &std::is_istream(_)],    true],
			[[std::strin("ABC"),       &std::is_istream(_)],    true],
			
			[[lambda => null,          &std::is_fxptr(_)],      true],
			
			[[std::external(0),        &std::is_external(_)],   true],
			[[lambda => null,          &std::is_external(_)],   false],
			
			[[std::external(0),        &std::is_functional(_)], true],
			[[lambda => null,          &std::is_functional(_)], true],
			[[lambda => null,          &std::is_functional(_)], true],
			
			
			[[std::struct(),           &std::is_struct(_)],     true],
			[[std::pair(1,2),          &std::is_struct(_)],     true],

			[[std::pair(1,2),          &std::is_rng(_)],        false],
			[[std::random::mersenne(), &std::is_rng(_)],        true],

			[[std::map(),              &std::is_queue(_)],      false],
			[[std::queue(),            &std::is_queue(_)],      true],
			[[std::cout(),             &std::is_queue(_)],      false],

			[[std::map(),              &std::is_map(_)],        true],
			[[std::random::mersenne(), &std::is_map(_)],        false],
			[[std::map(),              &std::is_map(_)],        true],
			[[std::stack(),            &std::is_map(_)],        false],

			[[std::stack(),            &std::is_stack(_)],      true],
			[["",                      &std::is_stack(_)],      false],

			[[std::whole([]),          &std::is_range(_)],      true],
			[[[],                      &std::is_range(_)],      false],
			
			[[true,                    &std::is_integral(_)],   true],
			[['A',                     &std::is_integral(_)],   true],
			[[1,                       &std::is_integral(_)],   true],
			[[1.5,                     &std::is_integral(_)],   false],
			[["",                      &std::is_integral(_)],   false],
			[[std::external(0),        &std::is_integral(_)],   false],

			[[true,                    &std::is_numeric(_)],    true],
			[['A',                     &std::is_numeric(_)],    true],
			[[1,                       &std::is_numeric(_)],    true],
			[[1.5,                     &std::is_numeric(_)],    true],
			[[null,                    &std::is_numeric(_)],    false],
			[[[],                      &std::is_numeric(_)],    false],
		];

		var fx = lambda (value, fx) => std::invoke(fx, [value]);



		return
			test_all_cases("std::is_type", &std::is_type(_,_), cases_1) +
			test_all_cases("std::is_type*", fx, cases_2);
	}



	function typeid() {
		var cases = [
			[[null],                    std::type::nul],
			[[true],                    std::type::bool],
			[[false],                   std::type::bool],
			[['a'],                     std::type::char],
			[[1],                       std::type::int],
			[[42.42],                   std::type::float],
			[[[]],                      std::type::array],
			[["test"],                  std::type::string],
			[[std::cin()],              std::type::istream],
			[[std::cout()],             std::type::ostream],
			[[&std::struct()],          std::type::fxptr],
			[[std::external(0)],        std::type::external],
			[[std::chrono::clock()],    std::type::clock],
			[[std::struct()],           std::type::struct],
			[[std::whole([])],          std::type::range],
			[[std::queue()],            std::type::queue],
			[[std::stack()],            std::type::stack],
			[[std::map()],              std::type::map],
			[[std::random::mersenne()], std::type::rng],
		];
		return test_all_cases("std::typeid", &std::typeid(_), cases);
	}
	


	function types() {
		return typeid() + is_type() + type_switch();
	}
}