namespace sphinx::test {
	
	var valid = [
		.{_+_} = lambda(self, other) => null,
		.{_-_} = lambda(self, other) => null,
		.{_*_} = lambda(self, other) => null,
		.{_/_} = lambda(self, other) => null,
		.{_%_} = lambda(self, other) => null,
		.{_**_} = lambda(self, other) => null,
		.{str} = lambda(self) => null,
		.{cmp} = lambda(self, other) => null,
	];
	
	var invalid_arity = [
		.{_+_} = lambda(self) => null,
		.{_-_} = lambda(self) => null,
		.{_*_} = lambda(self) => null,
		.{_/_} = lambda(self) => null,
		.{_%_} = lambda(self) => null,
		.{_**_} = lambda(self) => null,
		.{str} = lambda(self, other) => null,
		.{cmp} = lambda(self) => null,
	];
	
	var invalid_variadic = [ 
		.{_+_} = lambda(self, other, args...) => null,
		.{_-_} = lambda(self, other, args...) => null,
		.{_*_} = lambda(self, other, args...) => null,
		.{_/_} = lambda(self, other, args...) => null,
		.{_%_} = lambda(self, other, args...) => null,
		.{_**_} = lambda(self, other, args...) => null,
		.{str} = lambda(self, args...) => null,
		.{cmp} = lambda(self, other, args...) => null,
	];
	
	var invalid_no_function  = [ .x = null ];


	namespace utils {
		function test_is_xable(test) {
			assert_true(test(valid));
			assert_false(test(invalid_arity));
			assert_false(test(invalid_variadic));
			assert_false(test(invalid_no_function));
		}
	}


	function std_is_addable()        => utils::test_is_xable(&std::is_addable(_))
	function std_is_subtractable()   => utils::test_is_xable(&std::is_subtractable(_))
	function std_is_multipliable()   => utils::test_is_xable(&std::is_multipliable(_))
	function std_is_divisible()      => utils::test_is_xable(&std::is_divisible(_))
	function std_is_modable()        => utils::test_is_xable(&std::is_modable(_))
	function std_is_powable()        => utils::test_is_xable(&std::is_powable(_))
	function std_is_stringifiable()  => utils::test_is_xable(&std::is_stringifiable(_))
	function std_is_comparable()     => utils::test_is_xable(&std::is_comparable(_))
}