namespace sphinx::test {
	namespace utils {
		function test_is(type, expected) {
			for(e : expected) {
				var (value, result) = e;
				assert_equal_strict(std::is(type, value), result);
			}
		}
	}



	function std_is_type_null() {
		utils::test_is(std::Null, [
			(null, true),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_is_null() {
		assert_true(std::is_null(null));
		assert_false(std::is_null(1));
		assert_false(std::is_null(std::pair(1,2)));
	}




	function std_is_type_bool() {
		utils::test_is(std::Bool, [
			(null, false),
			(true, true),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_is_bool() {
		assert_true(std::is_bool(true));
		assert_false(std::is_bool(null));
	}



	function std_is_type_int() {
		utils::test_is(std::Int, [
			(null, false),
			(true, false),
			('A' , true),
			(1   , true),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_is_int() {
		assert_true(std::is_int(1));
		assert_true(std::is_int('A'));
	}



	function std_is_type_float() {
		utils::test_is(std::Float, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , true),
			(""  , false),
			([]  , false),
		]);
	}



	function std_is_float() {
		assert_false(std::is_float(1));
		assert_true(std::is_float(1.0));
	}



	function std_is_type_string() {
		utils::test_is(std::String, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , true),
			([]  , false),
		]);
	}
	

	
	function std_is_string() {
		assert_true(std::is_string("A"));
	}



	function std_is_type_array() {
		utils::test_is(std::Array, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , true),
			([1,2,3], true),
			([1.0,2.0,3.0], true),
		]);
	}



	function std_is_array() {
		assert_false(std::is_array("A"));
		assert_true(std::is_array([]));
	}



	function std_is_type_tuple() {
		utils::test_is(std::Tuple, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			((1,) , true),
			((1,2) , true),
			((1,2,3) , true),
		]);
	}



	function std_is_type_fx() {
		utils::test_is(std::Function, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			(lambda => null , true),
			(lambda(a,b) => null , true),
		]);
	}



	function std_is_type_istream() {
		utils::test_is(std::IStream, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			(std::cin(), true),
			(std::cout(), false),
		]);
	}



	function std_is_type_ostream() {
		utils::test_is(std::OStream, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			(std::cin(), false),
			(std::cout(), true),
		]);
	}



	
	function std_is_type_iter() {
		utils::test_is(std::Iterator, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([] ,  false),
			(std::range(0,1), true),
		]);
	}



	function std_is_type_stop() {
		utils::test_is(std::IteratorStop, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([] ,  false),
			(std::iter::get(std::range(0,0)), true),
		]);
	}



	function std_is_type_rng() {
		utils::test_is(std::Random, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([] ,  false),
			(std::random::mersenne(), true),
		]);
	}


	
	function std_is_type_clock() {
		utils::test_is(std::Clock, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([] ,  false),
			(std::chrono::make_clock(), true),
		]);
	}



	function std_is_type_type() {
		utils::test_is(std::Type, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([] ,  false),
			(std::Int, true),
		]);
	}




	function std_is_type_queue() {
		var q = std::make_queue();
		utils::test_is(std::Queue, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			(q   , true),
			([1.0,2.0,3.0], false),
		]);
	}



	function std_is_type_map() {
		var map = std::make_map();
		map[1] = "";
		map[1.0] = "";
		utils::test_is(std::Map, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			(map , true),
		]);
	}



	function std_type_is_struct_empty() {
		utils::test_is(std::Struct, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			([.] , true),
		]);
	}



	function std_type_is_coroutine() {
		utils::test_is(std::Coroutine, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
			([.] , false),
			(lambda coroutine {} (), true),
		]);
	}
}