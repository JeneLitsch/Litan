namespace sphinx::test {
	namespace utils {
		function test_is(type, expected) {
			for(e : expected) {
				var (value, result) = e;
				assert_equal_strict(std::is(type, value), result);
			}
		}
	}



	function std_type_is_null() {
		utils::test_is(<null>, [
			(null, true),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_type_is_bool() {
		utils::test_is(<bool>, [
			(null, false),
			(true, true),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_type_is_char() {
		utils::test_is(<char>, [
			(null, false),
			(true, false),
			('A' , true),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_type_is_int() {
		utils::test_is(<int>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , true),
			(1.0 , false),
			(""  , false),
			([]  , false),
		]);
	}



	function std_type_is_float() {
		utils::test_is(<float>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , true),
			(""  , false),
			([]  , false),
		]);
	}



	function std_type_is_string() {
		utils::test_is(<string>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , true),
			([]  , false),
		]);
	}



	function std_type_is_array() {
		utils::test_is(<array>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , true),
			([1,2,3], true),
			([1.0,2.0,3.0], true),
		]);
	}



	function std_type_is_array_int() {
		utils::test_is(<array(int)>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , true),
			([1,2,3], true),
			([1.0,2.0,3.0], false),
		]);
	}



	function std_type_is_array_float() {
		utils::test_is(<array(float)>, [
			(null, false),
			(true, false),
			('A' , false),
			(1   , false),
			(1.0 , false),
			(""  , false),
			([]  , true),
			([1,2,3], false),
			([1.0,2.0,3.0], true),
		]);
	}
}