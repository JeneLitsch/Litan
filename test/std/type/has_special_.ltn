namespace sphinx::test {
	
	var valid = [
		.{add} = lambda(self, other) => null,
		.{sub} = lambda(self, other) => null,
		.{mlt} = lambda(self, other) => null,
		.{div} = lambda(self, other) => null,
		.{mod} = lambda(self, other) => null,
		.{pow} = lambda(self, other) => null,
		.{str} = lambda(self) => null,
		.{cmp} = lambda(self, other) => null,
		.{bool} = lambda(self) => null,
	];
	
	var invalid_arity = [
		.{add} = lambda(self) => null,
		.{sub} = lambda(self) => null,
		.{mlt} = lambda(self) => null,
		.{div} = lambda(self) => null,
		.{mod} = lambda(self) => null,
		.{pow} = lambda(self) => null,
		.{str} = lambda(self, other) => null,
		.{cmp} = lambda(self) => null,
		.{bool} = lambda(self, other) => null,
	];
	
	var invalid_variadic = [ 
		.{add} = lambda(self, other, args...) => null,
		.{sub} = lambda(self, other, args...) => null,
		.{mlt} = lambda(self, other, args...) => null,
		.{div} = lambda(self, other, args...) => null,
		.{mod} = lambda(self, other, args...) => null,
		.{pow} = lambda(self, other, args...) => null,
		.{str} = lambda(self, args...) => null,
		.{cmp} = lambda(self, other, args...) => null,
		.{bool} = lambda(self, other, args...) => null,
	];
	
	var invalid_no_function  = [ .x = null ];


	namespace utils {
		function test_is_xable(test) {
			assert_true(test(valid));
			assert_false(test(invalid_arity));
			assert_false(test(invalid_variadic));
			assert_false(test(invalid_no_function));
		}
	}


	function std_has_special_add() => utils::test_is_xable(&std::has_special_add(_))
	function std_has_special_sub() => utils::test_is_xable(&std::has_special_sub(_))
	function std_has_special_mlt() => utils::test_is_xable(&std::has_special_mlt(_))
	function std_has_special_div() => utils::test_is_xable(&std::has_special_div(_))
	function std_has_special_mod() => utils::test_is_xable(&std::has_special_mod(_))
	function std_has_special_pow() => utils::test_is_xable(&std::has_special_pow(_))
	function std_has_special_str() => utils::test_is_xable(&std::has_special_str(_))
	function std_has_special_cmp() => utils::test_is_xable(&std::has_special_cmp(_))
	function std_has_special_bool() => utils::test_is_xable(&std::has_special_bool(_))
}