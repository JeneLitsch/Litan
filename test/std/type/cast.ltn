namespace sphinx::test {
	namespace utils {
		function test_cast(type, expected) {
			for(e : expected) {
				var (value, result) = e;
				assert_equal_strict(std::cast(type, value), result);
			}
		}
	}



	function std_type_cast_null() {
		utils::test_cast(<null>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , null),
		]);
	}



	function std_type_cast_bool() {
		utils::test_cast(<bool>, [
			(null, false),
			(false, false),
			(true, true),
			('A' , true),
			(0   , false),
			(1   , true),
			(1.0 , true),
			(""  , true),
			([]  , true),
			([.{bool} = lambda(self) => false ], false),
			([.{bool} = lambda(self) => true ], true),
		]);
	}



	function std_type_cast_char() {
		utils::test_cast(<char>, [
			(null, null),
			('A' , 'A'),
			(""  , null),
			([]  , null),
		]);
	}



	function std_type_cast_int() {
		utils::test_cast(<int>, [
			(null, null),
			(true, 1),
			('A' , 65),
			(1   , 1),
			(1.5 , 1),
			(""  , null),
			([]  , null),
		]);
	}



	function std_type_cast_float() {
		utils::test_cast(<float>, [
			(null, null),
			(true, 1.0),
			('A' , 65.0),
			(1   , 1.0),
			(1.5 , 1.5),
			(""  , null),
			([]  , null),
		]);
	}



	function std_type_cast_string() {
		utils::test_cast(<string>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , ""),
			([]  , null),
		]);
	}



	function std_type_cast_array() {
		utils::test_cast(<array>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , []),
			([1,2,3], [1,2,3]),
			([1.5,2.5,3.5], [1.5,2.5,3.5]),
		]);
	}



	function std_type_cast_array_int() {
		utils::test_cast(<array(int)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , []),
			([1,2,3], [1,2,3]),
			([1.5,2.5,3.5], [1,2,3]),
		]);
	}



	function std_type_cast_array_float() {
		utils::test_cast(<array(float)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , []),
			([1,2,3], [1.0,2.0,3.0]),
			([1.0,2.0,3.0], [1.0,2.0,3.0]),
		]);
	}


	function std_type_cast_tuple() {
		utils::test_cast(<tuple>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([1]  , null),
			([1,2,3], null),
			([1.0,2.0,3.0], null),
		]);
	}


	function std_type_cast_tuple_float() {
		utils::test_cast(<tuple(float)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([1] , (1.0,)),
			([1,2,3], null),
			([1.0,2.0,3.0], null),
		]);
	}



	function std_type_cast_tuple_float_int_float() {
		utils::test_cast(<tuple(float, int, float)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([1] , null),
			([1,2,3], (1.0,2,3.0)),
			([1.0,2.0,3.0], (1.0,2,3.0)),
		]);
	}



	function std_type_cast_fx() {
		var fx_0 = lambda => null;
		var fx_2 = lambda(a,b) => null;
		utils::test_cast(<fx>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] , null),
			(fx_0, fx_0),
			(fx_2, fx_2),
		]);
	}



	function std_type_cast_fx_0() {
		var fx_0 = lambda => null;
		var fx_2 = lambda(a,b) => null;
		utils::test_cast(<fx(0)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] , null),
			(fx_0, fx_0),
			(fx_2, null),
		]);
	}



	function std_type_cast_fx_2() {
		var fx_0 = lambda => null;
		var fx_2 = lambda(a,b) => null;
		utils::test_cast(<fx(2)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(fx_0, null),
			(fx_2, fx_2),
		]);
	}



	function std_type_cast_istream() {
		utils::test_cast(<istream>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::cin(), std::cin()),
			(std::cout(), null),
		]);
	}



	function std_type_cast_ostream() {
		utils::test_cast(<ostream>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::cin(), null),
			(std::cout(), std::cout()),
		]);
	}


	
	function std_type_cast_iter() {
		utils::test_cast(<iter>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::range(0,1), std::range(0,1)),
		]);
	}



	function std_type_cast_stop() {
		utils::test_cast(<stop>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::iter::get(std::range(0,0)), std::iter::get(std::range(0,0))),
		]);
	}



	function std_type_cast_rng() {
		utils::test_cast(<rng>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::random::mersenne(), std::random::mersenne()),
		]);
	}


	
	function std_type_cast_clock() {
		utils::test_cast(<clock>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(std::chrono::clock(), std::chrono::clock()),
		]);
	}



	function std_type_cast_type() {
		utils::test_cast(<type>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([] ,  null),
			(<int>, <int>),
		]);
	}




	function std_type_cast_queue() {
		var q1 = std::queue();
		std::push(q1, 1);
		std::push(q1, false);
		std::push(q1, 1.5);

		var q2 = std::queue();
		std::push(q2, 1);
		std::push(q2, 0);
		std::push(q2, 1);

		utils::test_cast(<queue(int)>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , null),
			(q1  , q2),
		]);
	}



	function std_type_cast_struct_empty() {
		utils::test_cast(<struct>, [
			(null, null),
			(true, null),
			('A' , null),
			(1   , null),
			(1.0 , null),
			(""  , null),
			([]  , null),
			([.] , [.]),
		]);
	}



	function std_type_cast_struct_member() {
		utils::test_cast(<struct(.a)>, [
			([.], null),
			([.a = 1], [.a = 1]),
			([.b = 1], null),
			([.a = 1, .b = 1], [.a = 1, .b = 1]),
		]);
	}



	function std_type_cast_struct_type() {
		utils::test_cast(<struct(.a:int)>, [
			([.], null),
			([.a = 1], [.a = 1]),
			([.a = 1.0], null),
		]);
	}
}