namespace sphinx::test {
	function std_iter_string_empty() {
		var iter = std::iter::iter("");
		assert_true(std::iter::is_stop(std::iter::next(iter)));
	}



	function std_iter_string() {
		var iter = std::iter::iter("ABC");
		
		assert_equal_strict(std::iter::get(iter), 'A'); 
		assert_equal_strict(std::iter::next(iter), 'A'); 
		assert_equal_strict(std::iter::get(iter), 'B'); 
		assert_equal_strict(std::iter::next(iter), 'B'); 
		assert_equal_strict(std::iter::get(iter), 'C'); 
		assert_equal_strict(std::iter::next(iter), 'C'); 
	}



	function std_iter_string_underflow() {
		var iter = std::iter::iter("ABC");
		
		std::iter::move(iter, -1);
		assert_true(std::iter::is_stop(std::iter::next(iter)));
	}



	function std_iter_string_overflow() {
		var iter = std::iter::iter("ABC");
		
		std::iter::move(iter, 3);
		assert_true(std::iter::is_stop(std::iter::get(iter)));
	}



	function std_iter_string_clone() {
		var iter1 = std::iter::iter("ABC");
		var iter2 = std::clone(iter1);
		std::iter::move(iter1, 1);
		assert_equal_strict(std::iter::get(iter1), 'B'); 
		assert_equal_strict(std::iter::get(iter2), 'A'); 
	}



	function std_iter_string_invalidate_push() 
		=> local::string_iter_invalidation(lambda(string) => std::push(string, 'X'))



	function std_iter_string_invalidate_pop()
		=> local::string_iter_invalidation(lambda(string) => std::pop(string))


		
	function std_iter_string_invalidate_insert()
		=> local::string_iter_invalidation(lambda(string) => std::insert(string, 0, 'X'))



	function std_iter_string_invalidate_remove()
		=> local::string_iter_invalidation(lambda(string) => std::remove(string, 0))
}