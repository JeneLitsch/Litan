namespace sphinx::test {
	function std_reduce_r_2_array() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r([1,2,3], add), 6);
		assert_equal_strict(std::reduce_r(["A","B","C"], add), "CBA");
	}



	function std_reduce_r_2_array_empty() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r([], add), null);
	}



	function std_reduce_r_2_tuple() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r((1,2,3), add), 6);
		assert_equal_strict(std::reduce_r(("A","B","C"), add), "CBA");
	}



	function std_reduce_r_2_tuple_empty() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r((), add), null);
	}



	function std_reduce_r_3_array() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r([1,2,3], add, 4), 10);
		assert_equal_strict(std::reduce_r(["A","B","C"], add, "___"), "___CBA");
	}



	function std_reduce_r_3_array_empty() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r([], add, 4), 4);
		assert_equal_strict(std::reduce_r([], add, "___"), "___");
	}



	function std_reduce_r_3_tuple() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r((1,2,3), add, 4), 10);
		assert_equal_strict(std::reduce_r(("A","B","C"), add, "___"), "___CBA");
	}



	function std_reduce_r_3_tuple_empty() {
		var add = lambda(a, b) => a + b;
		assert_equal_strict(std::reduce_r((), add, 4), 4);
		assert_equal_strict(std::reduce_r((), add, "___"), "___");
	}



	function std_reduce_r_3_string() {
		var add = lambda(a, b) => a + [b];
		assert_equal_strict(std::reduce_r("ABC", add, []), ['C', 'B', 'A']);
	}



	function std_reduce_r_3_string_empty() {
		var add = lambda(a, b) => a + [b];
		assert_equal_strict(std::reduce_r("", add, []), []);
	}
}