namespace sphinx::test {
	function std_str_null() {
		assert_equal_strict(std::str(null), "null");
	}



	function std_str_char() {
		assert_equal_strict(std::str('X'), "X");
	}


	
	function std_str_int() {
		assert_equal_strict(std::str(1), "1");
		assert_equal_strict(std::str(-1), "-1");
		assert_equal_strict(std::str(42), "42");
	}



	function std_str_float() {
		assert_equal_strict(std::str(1.0), "1");
		assert_equal_strict(std::str(-1.5), "-1.5");
		assert_equal_strict(std::str(42.42), "42.42");
	}



	function std_str_string() {
		var str1 = "Hello World";
		var str2 = std::str(str1);
		str2[0] = 'X';
		assert_equal_strict(str1, "Hello World"); // Ensures equality
		assert_equal_strict(str2, "Xello World"); // Ensures independence
	}





	function std_str_array() {
		assert_equal_strict(std::str([1]), "[1]");
		assert_equal_strict(std::str([1, 2, 3]), "[1, 2, 3]");
		assert_equal_strict(std::str([1, 2, [3, 4]]), "[1, 2, [3, 4]]");
	}



	function std_str_ostream() {
		var oss = std::strout();
		var str = "Hello World";
		std::print(oss, str);
		assert_equal_strict(std::str(oss), str);
	}



	function std_str_tuple() {
		assert_equal_strict(std::str((1,)), "(1)");
		assert_equal_strict(std::str((1, 2, 3)), "(1, 2, 3)");
		assert_equal_strict(std::str((1, 2, (3, 4))), "(1, 2, (3, 4))");
	}



	function std_str_map() {
		assert_equal_strict(std::str([:]), "[:]");
		assert_equal_strict(std::str(std::map()), "[:]");
		assert_equal_strict(std::str([1 : 2]), "[1 : 2]");
		assert_equal_strict(std::str([1 : 2, 3 : 4]), "[1 : 2, 3 : 4]");
	}



	function std_str_coroutine() {
		var c1 = lambda() coroutine {} ();
		assert_equal_strict(std::str(c1), "<coroutine{}>");

		var c2 = lambda(x) coroutine {} (1);
		assert_equal_strict(std::str(c2), "<coroutine{1}>");
		
		var c3 = lambda(x) coroutine {
			var y = 2; yield;
		} (1);
		assert_equal_strict(std::str(c3), "<coroutine{1, null}>");
		assert_equal_strict(std::str(c3()[0]), "<coroutine{1, 2}>");
		//assert_equal_strict(std::str(c3()[0][0]), "<coroutine{1, 2}>");
	}



	function str_str_type() {
		assert_equal_strict(std::str(<null>), "null");
		assert_equal_strict(std::str(<bool>), "bool");
		assert_equal_strict(std::str(<char>), "char");
		assert_equal_strict(std::str(<int>), "int");
		assert_equal_strict(std::str(<float>), "float");
		assert_equal_strict(std::str(<string>), "string");
		assert_equal_strict(std::str(<array>), "array(any)");
		assert_equal_strict(std::str(<array(float)>), "array(float)");
		assert_equal_strict(std::str(<tuple>), "tuple");
		assert_equal_strict(std::str(<tuple()>), "tuple()");
		assert_equal_strict(std::str(<tuple(int)>), "tuple(int)");
		assert_equal_strict(std::str(<tuple(int,float)>), "tuple(int,float)");
		assert_equal_strict(std::str(<fx>), "fx");
		assert_equal_strict(std::str(<fx(1)>), "fx(1)");
		assert_equal_strict(std::str(<fx(2)>), "fx(2)");
		assert_equal_strict(std::str(<istream>), "istream");
		assert_equal_strict(std::str(<ostream>), "ostream");
		assert_equal_strict(std::str(<iter>), "iter");
		assert_equal_strict(std::str(<stop>), "stop");
		assert_equal_strict(std::str(<rng>), "rng");
		assert_equal_strict(std::str(<clock>), "clock");
		assert_equal_strict(std::str(<type>), "type");
		assert_equal_strict(std::str(<queue>), "queue(any)");
		assert_equal_strict(std::str(<queue(float)>), "queue(float)");
		assert_equal_strict(std::str(<stack>), "stack(any)");
		assert_equal_strict(std::str(<stack(float)>), "stack(float)");
		assert_equal_strict(std::str(<map>), "map(any,any)");
		assert_equal_strict(std::str(<map(float, int)>), "map(float,int)");
		assert_equal_strict(std::str(<struct>), "struct");
		assert_equal_strict(std::str(<struct(.a:int)>), "struct(.a:int)");
		assert_equal_strict(std::str(<struct(.{add})>), "struct(.{add}:any)");
		assert_equal_strict(std::str(<struct(.{sub})>), "struct(.{sub}:any)");
		assert_equal_strict(std::str(<struct(.{mlt})>), "struct(.{mlt}:any)");
		assert_equal_strict(std::str(<struct(.{div})>), "struct(.{div}:any)");
		assert_equal_strict(std::str(<struct(.{mod})>), "struct(.{mod}:any)");
		assert_equal_strict(std::str(<struct(.{pow})>), "struct(.{pow}:any)");
		assert_equal_strict(std::str(<struct(.{str})>), "struct(.{str}:any)");
		assert_equal_strict(std::str(<struct(.{cmp})>), "struct(.{cmp}:any)");
		assert_equal_strict(std::str(<struct(.{bool})>), "struct(.{bool}:any)");
		
		assert_equal_strict(std::str(<type:null>), "null");
		assert_equal_strict(std::str(<type:bool>), "bool");
		assert_equal_strict(std::str(<type:char>), "char");
		assert_equal_strict(std::str(<type:int>), "int");
		assert_equal_strict(std::str(<type:float>), "float");
		assert_equal_strict(std::str(<type:string>), "string");
		assert_equal_strict(std::str(<type:array>), "array(any)");
		assert_equal_strict(std::str(<type:array(float)>), "array(float)");
		assert_equal_strict(std::str(<type:tuple>), "tuple");
		assert_equal_strict(std::str(<type:tuple()>), "tuple()");
		assert_equal_strict(std::str(<type:tuple(int)>), "tuple(int)");
		assert_equal_strict(std::str(<type:tuple(int,float)>), "tuple(int,float)");
		assert_equal_strict(std::str(<type:fx>), "fx");
		assert_equal_strict(std::str(<type:fx(1)>), "fx(1)");
		assert_equal_strict(std::str(<type:fx(2)>), "fx(2)");
		assert_equal_strict(std::str(<type:istream>), "istream");
		assert_equal_strict(std::str(<type:ostream>), "ostream");
		assert_equal_strict(std::str(<type:iter>), "iter");
		assert_equal_strict(std::str(<type:stop>), "stop");
		assert_equal_strict(std::str(<type:rng>), "rng");
		assert_equal_strict(std::str(<type:clock>), "clock");
		assert_equal_strict(std::str(<type:type>), "type");
		assert_equal_strict(std::str(<type:queue>), "queue(any)");
		assert_equal_strict(std::str(<type:queue(float)>), "queue(float)");
		assert_equal_strict(std::str(<type:stack>), "stack(any)");
		assert_equal_strict(std::str(<type:stack(float)>), "stack(float)");
		assert_equal_strict(std::str(<type:map>), "map(any,any)");
		assert_equal_strict(std::str(<type:map(float, int)>), "map(float,int)");

		assert_equal_strict(std::str(<coroutine>), "coroutine");
	}



	function std_str_string_nested_array() {
		assert_equal_strict(std::str(["1"]), "[\"1\"]");
		assert_equal_strict(std::str(["\n"]), "[\"\\n\"]");
		assert_equal_strict(std::str(["\""]), "[\"\\\"\"]");
		assert_equal_strict(std::str(["\t"]), "[\"\\t\"]");
	}



	function std_str_string_nested_tuple() {
		assert_equal_strict(std::str(("1",)), "(\"1\")");
		assert_equal_strict(std::str(("\n",)), "(\"\\n\")");
		assert_equal_strict(std::str(("\"",)), "(\"\\\"\")");
		assert_equal_strict(std::str(("\t",)), "(\"\\t\")");
	}



	function std_str_string_nested_map() {
		var map = [
			"\t" : "\n",
			"\"" : "\\",
		];
		var expected = "[\"\\t\" : \"\\n\", \"\\\"\" : \"\\\\\"]";
		assert_equal_strict(std::str(map), expected);
	}



	function std_str_string_nested_coroutine() {
		var (c, r) = lambda() coroutine {
			var x = "Test";
			yield;
		} ()();
		assert_equal_strict(std::str(c), "<coroutine{\"Test\"}>");
	}
}