namespace sphinx::test {
	function std_empty_array() {
		assert_true(std::empty([]));
		assert_false(std::empty([1,2,3]));
	}



	function std_empty_string() {
		assert_true(std::empty(""));
		assert_false(std::empty("ABC"));
	}



	function std_empty_queue() {
		var q = std::queue();
		assert_true(std::empty(q));
		std::push(q, 1); 
		assert_false(std::empty(q));
	}



	function std_empty_stack() {
		var s = std::stack();
		assert_true(std::empty(s));
		std::push(s, 1); 
		assert_false(std::empty(s));
	}



	function std_empty_map() {
		assert_true(std::empty([:]));
		assert_false(std::empty([0:1]));
	}



	function std_empty_iterator() {
		var test = lambda(iter) {
			var size = std::empty(iter);
			var counter = 0;
			for(elem : iter) {
				counter = counter + 1;
			}
			assert_equal_strict(size, counter == 0);
		};


		test(std::range(0,0));
		test(std::range(0,100));
		test(std::range(0,100,2));
		test(std::range(0,99,2));
		test(std::range(0,99,3));
		test(std::range(0,99,4));

		test(std::iter::iter([]));
		test(std::iter::iter([1,2,3]));
		
		test(std::iter::iter(""));
		test(std::iter::iter("ABC"));

		test(std::zipped("ABC", [1,2,3]));
		test(std::zipped("ABC", [1,2,3,4]));
		test(std::zipped("ABC", []));
	}
}