namespace sphinx::test {
	namespace utils {
		function impl_insert_all(insertion, base, elems) {
			for(e : elems) insertion(base, e);
			return base;
		}

		function insert_front_all(base, elems) 
			=> impl_insert_all(&std::insert_front(_,_),base, elems)

		function insert_back_all(base, elems) 
			=> impl_insert_all(&std::insert_back(_,_),base, elems)

		function insert_all(base, elems)
			=> impl_insert_all(
				lambda(base, e) {
					var (i, v) = e;
					std::insert(base, i, v);
				}, base, elems)
	}



	function std_insert_front_array() {
		assert_equal_strict(utils::insert_front_all([], [3,2,1]), [1,2,3]);
	}



	function std_insert_back_array() {
		assert_equal_strict(utils::insert_back_all([], [1,2,3]), [1,2,3]);
	}



	function std_insert_array() {
		assert_equal_strict(
			utils::insert_all([], [(0, 3), (0, 1), (1, 2), (3, 4)]),
			[1, 2, 3, 4]
		);
	}



	function std_insert_array_out_of_range() {
		assert_except(lambda {
			var arr = [];
			std::insert(arr, 1, 42);
			assert_equal_strict(arr, [1,2,3]);
		});
	}



	function std_insert_map() { 
		var map = utils::insert_all(std::map(), [
			(1, "A"),
			(2, "B"),
			(3, "C"),
		]);
		assert_equal_strict(map[1], "A");
		assert_equal_strict(map[2], "B");
		assert_equal_strict(map[3], "C");
	}
}