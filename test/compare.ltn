namespace test {
	function eql() {
		var cases = [
			[["Hello", "Hello"], true],
			[["Hello", "World"], false],
			[[0, false], true],
			[[std::null_v(), true], false],
			[[std::cout(), std::cout()], true],
			[["123", "123"], true],
		];

		var fx = lambda (a, b) => a == b;

		return test_all_cases("Equal==", fx, cases);
	}


	function uneql() {
		var cases = [
			[["Hello", "Hello"], false],
			[["Hello", "World"], true],
			[[0, false], false],
			[[std::null_v(), true], true],
			[[std::cout(), std::cout()], false],
			[["123", "123"], false],
		];

		var fx = lambda (a, b) => a != b;

		return test_all_cases("Unequal!=", fx, cases);
	}


	function smaller() {
		var cases = [
			[[1, 2], true],
			[[42, -2.0], false],
			[[-42, -2.0], true],
			[['A', 'C'], true],
			[['Z', 'Y'], false],
			[["ABC", "AB"], false],
			[["ABC", "BC"], true],
			[["ABCD", "ZBC"], true],
			[["ZBCD", "AZBC"], false],
			[[std::cout(), std::cout()], false],
			[[std::cin(), std::cout()], true],
		];

		var fx = lambda (a, b) => a < b;

		return test_all_cases("Smaller<", fx, cases);
	}


	function bigger() {
		var cases = [
			[[1, 2], false],
			[[42, -2.0], true],
			[[-42, -2.0], false],
			[['A', 'C'], false],
			[['Z', 'Y'], true],
			[["ABC", "AB"], true],
			[["ABC", "BC"], false],
			[["ABCD", "ZBC"], false],
			[["ZBCD", "AZBC"], true],
			[[std::cout(), std::cout()], false],
			[[std::cin(), std::cout()], false],
		];

		var fx = lambda(a, b) => a > b;

		return test_all_cases("Bigger>", fx, cases);
	}

	function smaller_eql() {
		var cases = [
			[[true, true], true],
			[[true, false], false],
			[['A', 'A'], true],
			[['Z', 'Z'], true],
			[[1, 2], true],
			[[1, 1], true],
			[[42, -2.0], false],
			[[-42, -2.0], true],
			[['A', 'C'], true],
			[['Z', 'Y'], false],
			[["ABC", "AB"], false],
			[["ABC", "BC"], true],
			[["ABCD", "ZBC"], true],
			[["ZBCD", "AZBC"], false],
			[[std::cout(), std::cout()], true],
			[[std::cin(), std::cout()], true],
		];

		var fx = lambda (a, b) => a <= b;

		return test_all_cases("SmallerEqual<=", fx, cases);
	}


	function bigger_eql() {
		var cases = [
			[[true, true], true],
			[[true, false], true],
			[['A', 'A'], true],
			[['Z', 'Z'], true],
			[[1, 2], false],
			[[42, -2.0], true],
			[[-42, -2.0], false],
			[['A', 'C'], false],
			[['Z', 'Y'], true],
			[["ABC", "AB"], true],
			[["ABC", "BC"], false],
			[["ABCD", "ZBC"], false],
			[["ZBCD", "AZBC"], true],
			[[std::cout(), std::cout()], true],
			[[std::cin(), std::cout()], false],
		];

		var fx = lambda (a, b) => a >= b;

		return test_all_cases("BiggerEqual>=", fx, cases);
	}

	function space_ship() {
		var cases = [
			[[-1, 1], -1],
			[[1, 1], 0],
			[[1, -1], 1],
			[['A', 'A'], 0],
			[['A', 'Z'], -1],
			[['Z', 'A'], 1],
			[["A", "B"], -1],
			[["C", "B"], 1],
			[["a", "A"], 1],
			[["zzz", "zzz"], 0],
			[[[1,2,3], [1,2,3]], 0],
			[[[1,2], [1,2,3]], -1],
			[[[1,2,4], [1,2,3]], 1],
		];

		var fx = lambda (a, b) => a <=> b;

		return test_all_cases("Space ship <=>", fx, cases);
	}

	function approx() {
		var cases = [
			[[-1, 1], false],
			[[1, 1], true],
			[[1.0000000001, 1], true],
			[['A', 'B'], false],
			[['A', 'A'], true],
			[["A", "B"], false],
			[["C", "B"], false],
			[["A", "A"], true],
			[["ABC", "ABC"], true],
			[["AB", "ABC"], false],
			[[[1,2,3], [1,2,3]], true],
			[[[1,2], [1,2,3]], false],
			[[[1,2,4], [1,2,3]], false],
		];

		var fx = lambda (a, b) => a~~b;

		return test_all_cases("Approx ~~", fx, cases);
	}

	function not_approx() {
		var cases = [
			[[-1, 1], true],
			[[1, 1], false],
			[[1.0000000001, 1], false],
			[['A', 'B'], true],
			[['A', 'A'], false],
			[["A", "B"], true],
			[["C", "B"], true],
			[["A", "A"], false],
			[["ABC", "ABC"], false],
			[["AB", "ABC"], true],
			[[[1,2,3], [1,2,3]], false],
			[[[1,2], [1,2,3]], true],
			[[[1,2,4], [1,2,3]], true],
			[[[1,2,4], [1,2,3]], true],
		];

		var fx = lambda (a, b) {
			return a !~ b;
		};

		return test_all_cases("Not Approx !~", fx, cases);
	}

	function compare() {
		return
			eql() + 
			uneql() + 
			smaller() + 
			bigger() + 
			smaller_eql() + 
			bigger_eql() + 
			space_ship() + 
			approx() +
			not_approx();
	}
}