namespace sphinx::test {
	function nullco() {
		assert_equal(true ?? 1, true);
		assert_equal(false ?? 1, false);
		assert_equal(-1 ?? 1, -1);
		assert_equal(null ?? 1, 1);
		assert_equal("" ?? 1, "");
		assert_equal([] ?? 1, []);
		assert_equal(42 ?? 1337, 42);
		assert_equal(0 ?? 1337, 0);
		assert_equal(std::cout() ?? 1337, std::cout());
		assert_equal(0.0 ?? 1337, 0.0);
	}



	function nullco_type() {
		assert_equal(decltype(1 ?? 1).name, "int");
		assert_equal(decltype("1" ?? 1).name, "any");
		assert_equal(decltype("1" ?? "str").name, "string");
		assert_equal(decltype(["1"] ?? [1]).name, "array<any>");
		assert_equal(decltype([[]] ?? [[]]).name, "array<array<>>");
		assert_equal(decltype([[true]] ?? [[1]]).name, "array<array<any>>");
	}



	function nullco_short_circuit() {
		std::print("DISABLED");
		// var test_short = lambda(a) {
		// 	var second = std::mono(false);
		// 	a ?? lambda [second] () { second.value = true; }();
		// 	return second.value;
		// };

		// assert_true(test_short(null));
		// assert_false(test_short(1));
    }



	function nullco_condition_once() {
		var evals = 0;
		iife { evals = evals + 1; } ?? null;
		assert_true(evals == 1);
    }
}