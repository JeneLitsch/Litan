#pragma once
#include <cstdint>

// formats
// c,v,s 	-> 32 16 8 opcode(8)
// j 		-> 56      opcode(8)

enum class InstCode : std::uint8_t {
	// System
	EXIT = 0x00, ERROR, 
	PRINT,
	FETCH,
	STACKALLOC,
	
	// Acc manipulation
	SCRAP = 0x10,
	COPY,
	NEWL, NEWU,
	LOAD, STORE,
	
	// Control Flow
	CALL = 0x20, GOTO, RETURN, IFNX,

	// Integer Arithmetic
	ADDI = 0x30, SUBI, MLTI, DIVI, POWI, MODI, CASTI, INCI, DECI, MNSI, MINI, MAXI,
	
	// Float Arithmetic
	ADDF = 0x40, SUBF, MLTF, DIVF, POWF, MODF, CASTF, INCF, DECF, MNSF, MINF, MAXF,
	
	// Bitwise, Logic and Comparison 
	BITOR = 0x50, BITAND, BITXOR, BITNOT,
	LOGOR, LOGAND, LOGXOR, LOGNOT,
	EQLI, SMLI, BGRI, SPSHI, EQLF, SMLF, BGRF, SPSHF,


	// Sort Algorithm	
	SORT_RADIX = 0x90,
	// Random
	RAND_INT = 0x98, RAND_FLOAT, RAND_NORM, RAND_UNIT,
	
	// Heap
	HEAP_ALLOCATE = 0xa0, HEAP_DELETE, HEAP_EXIST, HEAP_ISTYPE, HEAP_COPY,
	
	// Array/Vector and Object
	ARRAY_PUSHB = 0xb0, ARRAY_POPB,
	ARRAY_FRONT, ARRAY_BACK,
	ARRAY_CLEAR, ARRAY_GET, ARRAY_SET, ARRAY_SIZE, ARRAY_EMPTY, ARRAY_FILL, ARRAY_RESIZE, ARRAY_INSERT, ARRAY_ERASE,
	
	// String and Struct
	STRING_ADD = 0xc0, STRING_DATA,
	STRUCT_READ = 0xc8, STRUCT_WRITE,

	// Stack and Queue
	STACK_PUSH = 0xd0, STACK_POP, STACK_EMPTY, STACK_SIZE, STACk_CLEAR, STACK_TOP,
	QUEUE_PUSH = 0xd8, QUEUE_POP, QUEUE_EMPTY, QUEUE_SIZE, QUEUE_CLEAR, QUEUE_FRONT,
	
	// Deque
	DEQUE_PUSHF = 0xe0, DEQUE_PUSHB, DEQUE_POPF, DEQUE_POPB, 
	DEQUE_FRONT, DEQUE_BACK,
	DEQUE_EMPTY, DEQUE_SIZE, DEQUE_CLEAR,

	// Extension
	EXT0 = 0xf0, EXT1, EXT2, EXT3, EXT4, EXT5, EXT6, EXT7,
	
	// Loop
	LOOP_RANGE = 0xf8, LOOP_INF, LOOP_CONT, LOOP_STOP, LOOP_IDX,
};